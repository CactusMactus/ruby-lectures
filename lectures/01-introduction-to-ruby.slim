= slide 'Административни неща', '...където припомняме за какво идеше реч' do
  ul
    li.action Ruby курс, в който влизаме дълбоко в заешката дупка
    li.action Понеделник и сряда, зала 200, от 19-21 ч.
    li.action
      ' Сайтът ни е <a href="http://fmi.ruby.bg/">fmi.ruby.bg</a> &mdash; регистрирайте се
        скоропостижно, ако все още не сте.
    li.action
      ' Имаме <a href="http://facebook.com/groups/programming.ruby/">Facebook група</a>, ако си падате по тези неща

= slide 'Административни неща (2)' do
  list:
    Курсът е труден, тежък, страшен...
    Но и inclusive!
    Ако идвате само за кредити и/или оценка, по-добре отпишете
    Основно лекции (и някои други неща), нямаме упражнения
    Присъствието е силно препоръчително (така ще ви е доста по-лесно)
    Всичко се върти около сайта на курса и присъствие на лекциите, направете си сметка
    Вижте [уводната лекция "За курса"](/lectures) за подробности

= slide 'Добри новини (за изостаналите)', 'или как да изкарате първите си 3 точки' do
  list:
    Сложете си снимка на сайта – градим общност
    Качете си Ruby 2.3.1 и качете screenshot на форумите
    НОВО! НОВО! НОВО! [Представете се във форумите](/topics/17) – отново, общност

= slide 'По-добри новини', 'първа задача' do
  list:
    Ще ви я дадем още днес
    Имате срок до понеделник
    Припомняме, че ако не предадете повече от 3 задачи, ще се видим септември

= slide 'Класация' do
  p.action
    img src="01/leaderboard.png"

  p.action
    ' Това е от края на миналата година (без точки от проекти).

= slide 'Цели', 'За какво ще говорим днес?' do
  list:
    Какво е Ruby програма и как се изпълнява?
    Как да се справим с документацията в Ruby
    Основните типове в Ruby
    Променливи и константи
    Условни конструкции — `if`
    Дефиниране и извикване на прости функции

= slide 'В случай на въпрос' do
  list:
    Изчакайте до края на текущия слайд
    Ако не получите отговор, вдигнете ръка
    Питайте свободно когото и да е от екипа
    Питайте другарче
    Питайте във форумите
    Но питайте

= slide 'Ruby програми' do
  list:
    Програмите в Ruby са текстови файлове
    Няма компилация като в C или Java
    Изпълняват се в терминал/конзола/command prompt с `ruby име_на_файл`

= slide 'Ruby програми', 'Любимият на всички пример' do
  example:
    puts "Hello world"
    puts "The answer of life is ", 6 * 7

  p Изпълнява се с <code>ruby hello.rb</code>

= slide 'Конзола', 'където ще прекарваме много време' do
  list:
    Не е специфично за Ruby
    Това е бил единственият "интерфейс" с ОС преди GUI
    Все още го има – много удобно за автоматизиране на задачи
    Позволява стартиране на процеси, които (обикновено) нямат GUI
    Ще прекарваме доста време там; направете си я удобна и свиквайте

= slide 'Конзола/терминал', 'под Windows' do
  list:
    Под Windows имате [алтернатива на дървения Command Prompt](http://cmder.net)
    Ако сте с Windows 10 може да опитате Bash for Windows
    За горното - [вижте първите части на този гайд](https://gorails.com/setup/windows/10)

= slide 'irb', 'интерактивна конзола' do
  list:
    `irb` – Interactive Ruby
    REPL — Read-Eval-Print Loop
    Тук ще прекарваме доста време - и ние, и вие
    Стартирате я с `irb` (трябва да ви е в "пътя")
    Самото `irb` е конзола в конзолата
    Излизате от `irb` с `exit` или с `Ctrl + D` (под Linux/macOS)

= slide 'irb', 'интерактивна конзола' do
  pre
    ' $ irb
      >> 6 * 9
      54
      >> "Ruby! " * 4
      "Ruby! Ruby! Ruby! Ruby!"
      >> -10.abs
      10

= slide 'irb', 'особености' do
  list:
    `Ctrl + C` и `Ctrl + D`
    Windows - Copy/paste
    Синтактични грешки
    Мини демо тайм

= slide 'Документация', 'или как да разберем какво прави нещо в Ruby?' do
  ul
    li <code>ri</code> е инструмент, с който може да разглеждате документацията на клас или метод
    li
       code ri String
       '  показва документацията на класа <code>String</code>
    li
      code ri Numeric#abs
      '  показва документацията на метода <code>abs</code> на класа на числата
    li
      code ri -i
      '  пуска документацията в интерактивен режим. Пробвайте го.
    li
      ' Документацията е достъпна онлайн на
      a href="http://ruby-doc.org/" http://ruby-doc.org/

= slide 'Съставните части на една Ruby програма', 'ръководство по ориентиране' do
  list:
    Синтаксис (вкл. и ключови думи)
    Ключови думи `if`, `def`, `class`, `defined?` и още дузина-две
    Ядро (core) – [http://ruby-doc.org/core/](http://ruby-doc.org/core/)
    Стандартна библиотека (stdlib) – [http://ruby-doc.org/stdlib/](http://ruby-doc.org/stdlib/)
    Нещата от стандартната библиотека се инсталират с Ruby, но трябва да ги заредите с `require`

= slide 'Инсталация', 'или как да се снабдим?' do
  list:
    [http://ruby-lang.org/](http://ruby-lang.org/en/downloads)
    Windows — има [RubyInstaller](http://rubyinstaller.org)
    Linux, Mac — пробвайте [rbenv](https://github.com/sstephenson/rbenv#readme) или [RVM](http://rvm.beginrescueend.com/)
    Има [тема във форумите](/topics/1) с инструкции за популярните ОС

= slide 'Редактори', 'вечният... дебат' do
  ul
    li.action Забравете за IDE-тата, това не е Java, C# и прочее
    li.action Ако много държите на IDE, пробвайте RubyMine на JetBrains
    li.action Най-добре ползвайте любимия си текстов редактор
    li.action Ако нямате такъв, сега е време да си изберете
    li.action Научете Vim или Emacs. После ще ни благодарите ;) (май)
    li.action Ние бихме ви посъветвали да пробвате <a href="http://www.sublimetext.com/">Sublime Text</a> или <a href="http://atom.io/">Atom</a>

= slide 'Стил' do
  ul
    li.action В момента говорим за "форматиране на кода", а не за дизайн
    li.action Изискваме от вас стил като описания тук: <a href="https://github.com/bbatsov/ruby-style-guide#readme">Ruby Style Guide</a>
    li.action Цитат: "Ако не можете да си подреждате кода, ориентирайте се към друга професия. Например строителство."
    li.action Yoda: "Unexpected this is. And unfortunate."

= slide 'Извеждане на екрана', 'или как да досаждате на хората с текст' do
  ul
    li.action Става с <code>puts</code>
    li.action Например <code>puts "Chunky bacon!"</code>
    li.action <code>puts</code> не е ключова дума, а "глобална" функция
    li.action Може да се извика и със скоби: <code>puts("Chunky bacon!")</code>
    li.action Последното важи за всички функции в Ruby

= slide 'Имена и неща' do
  p Нещата се наименуват с <code>=</code>

  example:
    answer = 42
    almost_pi = 3.14
    food = 'Chunky bacon'
    greeting = "What's up?"

= slide 'Имена и неща', '...или разликата между нещо и неговите имена' do
  p
    ' <code>=</code> не копира стойността, а насочва променливата към обекта отдясно

  pre
    ' >> word = "oat"
      >> breakfast = word
      >> dinner = word
      >> word.insert(0, 'g')
      >> puts breakfast
      goat

= slide 'Действия', 'още известни като "методи"' do
  pre
    ' >> "shut up".upcase()
      →  "SHUT UP"
      >> "wonderful".sub("wonder", "color")
      →  "colorful"
      >> 3.14.floor
      →  3
      >> 24.gcd 56
      →  8
      >> 'wonderful'.sub 'wonde', 'colo'
      →  "colorful"

= slide 'Видове променливи' do
  example:
    favourite = 'Chunky bacon' # локална
    Tax = '20%'                # константа
    $important = 'Money'       # глобална

  p Има още: <code>@name</code> и <code>@@name</code>

= slide 'Ключови думи', 'Вече заети' do
  pre
    ' alias    and      BEGIN    begin      break
      case     class    def      defined?   do
      else     elsif    END      end        ensure
      false    for      if       in         module
      next     nil      not      or         redo
      rescue   retry    return   self       super
      then     true     undef    unless     until
      when     while    yield

= slide 'Основни типове', '1/2' do
  ul
    li.action Цели числа &mdash; <code>42</code>, <code>-271</code>, <code>1_024</code>
    li.action Низове &mdash; <code>"chunky"</code>, <code>'bacon'</code>
    li.action С плаваща запетая &mdash; <code>3.1415</code>
    li.action Булеви &mdash; <code>true</code> и <code>false</code>
    li.action Нищо &mdash; <code>nil</code>
    li.action Масиви &mdash; <code>[2, 3, 5, 7, 11]</code>

= slide 'Основни типове', '2/2' do
  ul
    li.action Хешове &mdash; <code>{'one' => 1, 'two' => 2}</code>
    li.action Регулярни изрази &mdash; <code>/(bb)|([^b]{2})/</code>
    li.action Области &mdash; <code>2..6</code>, <code>'a'...'z'</code>
    li.action Символи &mdash; <code>:name</code>, <code>:send</code>
    li.action Анонимни функции &mdash; <code>lambda { |x| x ** 2 }</code>, <code>-> x { x ** 2 }</code>
    li.action Обекти &mdash; <code>Person.new</code>

= slide 'Цели числа' do
  example:
    0
    1729
    -271
    1_000_000
    0377        # осмични
    0b0100_0010 # двоични
    0xDEADBEEF  # шестнадесетични

= slide 'Числа с плаваща запетая' do
  example:
    0.0
    3.14
    -273.15
    1.22e28
    1_000.001

= slide 'Текст' do
  example:
    'Chunky bacon, I say!'
    "Who is John Galt?"
    "We're the knights who say \"Ni!\""
    '\'0 freddled gruntbugly\' he begun'
    'This text contains\nno newlines'
    "This text contains\none newline"

= slide 'Операции с текст' do
  pre
    ' >> "Hello, " + " " + "chunky!"
      →  "Hello,  chunky!"
      >> "Ha! " * 3
      →  "Ha! Ha! Ha! "
      >> "%s bacon" % 'Chunky'
      →  "Chunky bacon"
      >> text = 'Chanky'
      >> text[2] = 'u'
      >> text << ' bacon'
      >> puts text
      Chunky bacon

= slide 'Още операции с текст' do
  annotate:
    "bacon\n".chop            #=>
    "bacon".chop              #=>
    "bacon\n".chomp           #=>
    "bacon".chomp             #=>
    "Goodbye".include? 'oo'   #=>
    "Danube".length           #=>
    "oat".insert 0, 'bl'      #=>
    "bloat".sub "bl", "m"     #=>
    "bacon".upcase            #=>
    "BaCoN".downcase          #=>

= slide 'Символи', '...което ще ви обърка' do
  ul
    li.action Малко особен тип в Ruby
    li.action <code>:something</code>, <code>:other</code> и <code>:larodi</code>
    li.action Сходен на низ &mdash; immutable и интерниран
    li.action Различни приложения
    li.action Не го мислете много

= slide 'Интерполация' do
  p Работи при двойни кавички, не работи при единични

  example:
    character = 'Arthur'
    answer = 42
    puts "#{character} had it: #{answer}"

= slide 'Оператори', '...или как да оперирате с Ruby' do
  pre
    ' **  ~   /   %    +    -    &
      <<  >>  |   ^    >    <    >=   <=   <=>
      &&  ||  !   and  or   not  ||=  &&=
      =   +=  -=  *=   /=   %=   **=  >>=  <<=
      ^=  &=  |=  ..   ...  defined?

= slide 'Истина и лъжа', '...където става философско' do
  ul
    li.action <code>nil</code> се оценява като "лъжа"
    li.action <code>false</code> се оценява като "лъжа" (очевидно)
    li.action всичко друго е истина
    li.action <code>0</code>, <code>""</code> и <code>[]</code> са истина

= slide 'Булеви оператори' do
  ul
    li.action <code>and</code>, <code>or</code> и <code>not</code> правят това, което очаквате
    li.action <code>&&</code>, <code>||</code> и <code>!</code> &mdash; също
    li.action Разликата между тях е тънка. Придържайте се към вторите

= slide 'Сравнение', '...когато размерът има значение' do
  pre
    ' >> 20 > 20
      →  false
      >> "perl" < "ruby"
      →  true
      >> 5 <= 5
      →  true
      >> "foo" <=> "bar"
      →  1

= slide 'Равенство', '...където става оплетено' do
  p В Ruby има четири оператора за равенство

  example:
    one == two
    one === two
    one.eql? two
    one.equal? two

= slide 'Равенство', '== и equal?' do
  p Това е стандартното поведение на Ruby. Има специални случаи.
  annotate:
    one = 'chunky bacon'
    two = 'chunky bacon'
    one == two           #=>
    one.equal? two       #=>

= slide 'Равенство', 'Специалните случаи' do
  p Можете ли да произнесете "интерниране"?

  annotate:
    one, two = 42, 42
    one == two      #=>
    one.equal? two  #=>

  p Същото важи и за символи.

= slide 'Условия' do
  p Ключовата дума е <code>if</code>

  example:
    if hungry? && sad?
      eat_chocolate
      listen_to_music
      go :outside
    end

= slide 'Условия', 'или' do
  p Разбира се, има и <code>else</code>
  example:
    if hungry?
      eat
    else
      drink
    end

= slide 'Условия', 'ако пък' do
  example:
    if hungry?
      eat
    elsif thirsty?
      drink
    else
      philosophize
    end

= slide 'Условия', '...където научавате, че всяко условие е израз' do
  example:
    classification = if age < 13
                       'young person'
                     elsif age < 20
                       'teenager'
                     else
                       'old dude'
                     end

= slide 'Условия', 'на един ред' do
  example:
    eat if hungry?

  p Яко, а? Може и:

  example:
    order = if hungry? then 'food' else 'coffee' end

= slide 'Условия', 'освен ако' do
  p <code>unless</code> е като <code>if not</code>.
  p Всичко за <code>if</code> е приложимо
  p Не ползвайте <code>unless</code> с <code>else</code> (style warning!)

  example:
    unless tired?
      go_out_and_run
    end

= slide 'Функции', 'минимумът, който ще ви трябва за домашното' do
  p Всъщност ние ще ги наричаме методи. Скоро ще разберете защо.
  p Дефинират се с <code>def</code>.

  example:
    def eat_chocolate
      puts 'nom nom nom'
    end

  pre
    ' $ irb
      >> eat_chocolate
      →  nil
      nom nom nom

= slide 'Функции', 'резултати' do
  p Всеки метод връща резултат - последният израз в него.

  annotate:
    def add(a, b)
      a + b
    end

    add(5, 10) #=>

= slide 'Функции', 'резултати' do
  p Това важи и за по-сложни изрази.

  annotate:
    def max(a, b)
      if a > b
        a
      else
        b
      end
    end

    max(1, 5) #=>

  p Има и ключова дума <code>return</code> - използвайте я само в краен случай.

= slide 'Няколко съвета за домашното' do
  ul
    li.action Търсете по-добри решения! Не се спирайте на първото, което ви хрумне
    li.action Не превеждайте директно от езика X към Ruby
    li.action Консултирайте се с документацията
    li.action Пуснете си примерния тест преди да предадете решение
    li.action Прегледайте <a href="https://github.com/bbatsov/ruby-style-guide#readme">ръководството по стил</a>
    li.action Вижте <a href="https://github.com/fmi/ruby-homework#readme">инструкциите за средата за домашните</a>
