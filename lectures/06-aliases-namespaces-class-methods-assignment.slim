= slide 'Днес' do
  list:
    Синоними на методи
    Именовани пространства
    Класови методи
    Паралелно присвояване

= slide 'OpenFest' do
  list:
    [OpenFest](http://openfest.org/) този уикенд (5/6 ноември)
    [Програмата е много богата](http://www.openfest.org/2016/bg/programa/)
    Лекциите са интересни, но хората (публика и лектори) са още по-интересни
    Входът е свободен, Зала "България"
    Може да идвате и да си тръгвате когато искате

= slide 'Четвърта задача' do
  ul
    li Ще я пуснем днес
    li Срок до сряда, 17:30 - за да отидете на OpenFest
    li Цел – да упражните класове

= slide 'Въпрос 1' do
  p Какво ще има в ancestors chain-a?

  example:
    module Foo; end
    module Bar; end
    module Baz; end

    module Qux
      include Foo
      include Bar
    end

    class Garply
      include Foo
      include Qux
    end

    class Waldo < Garply
      include Foo
      include Baz
      include Bar
    end

    Waldo.ancestors # =>

  .action.answer
    p <code>[Waldo, Baz, Garply, Qux, Bar, Foo, Object, Kernel, BasicObject]</code>

= slide 'Основните класове в Ruby' do
  p
    em "Всичко наследява от <code>Object</code>"

  annotate:
    Class.ancestors # =>

  list:
    Очевидно, не е съвсем така – `Object` не наследява от `Object`
    Родителят му е `BasicObject`
    Родителят на `BasicObject` е `nil`
    `BasicObject` е минималистичен клас, подходящ за проксита

= slide 'Основните класове в Ruby' do
  annotate:
    Class.ancestors # =>

  list:
    `Kernel` е миксиран в `Object`
    "Глобалните методи" са дефинирани в `Kernel` (`#puts`, `#eval` и т.н.)
    Общите методи за всички инстанции са в `Object` (`#inspect`, `#tap`, `#methods` и т.н.)
    Ако дефинирате методи извън модул или клас, той отива като private метод на `Object`
    Всеки път като правите това, котенце някъде умира

= slide 'protected' do
  p Само обекти от същия клас могат да викат protected методи

  annotate:
    class Vector
      def initialize(x, y) @x, @y = x, y          end
      def inspect()        "Vector.new(#@x, #@y)" end

      def +(other)
        Vector.new(*coords.zip(other.coords).map { |a, b| a + b })
      end

      protected
      def coords() [@x, @y] end
    end

    vector = Vector.new(1, 2) + Vector.new(3, 4)
    vector        # =>
    vector.coords #!

= slide 'private и protected', 'още известни като Private, Public и General Specific' do
  list:
    `private` се ползва постоянно
    `protected` почти никога
    Има school of thought, който предпочита `protected`, защото могат да се викат със `self.` отпред
    Ние не сме от тази клика
    Има и `public`. Не го ползваме, а просто слагаме публичните методи отгоре
    Впрочем, не са ключови думи, а методи на `Module` и `Class`

= slide 'Клас-макросите private и protected' do
  p Понеже <code>private</code> и <code>protected</code> са методи:

  example:
    class Person
      def name() end
      def age()  end

      private :name, :age
    end

  p Или дори:

  annotate:
    class String
      private :upcase!, :downcase!
    end

    "Foo".upcase! #!

= slide 'Клас-макросите private и protected (2)' do
  p Помните ли, че дефиницията на метод връща името на метод като символ?

  example:
    def foo() end # :foo

  p Значи може да направите така:

  example:
    class Person
      private def name
        "My name is a secret."
      end

      private def age
        "I'm feeling feminine, so my age is a secret, too."
      end
    end

= slide 'Синоними на методи в Ruby' do
  list:
    Можете да дефинирате синоними на методи в Ruby, посредством:
    Ключовата дума `alias`
    Метода `Module#alias_method` (клас макро)
    И двете правят достъпно копие на тялото на даден метод под друго име
    Използват се много във вградените в Ruby-методи, например `String#size` и `String#length`

= slide 'Синтаксис за синоними на методи' do
  list:
    С ключовата дума `alias`: `alias :new_method :old_method`
    Или: `alias new_method old_method` (забележете, че това не са символи или низове, a идентификатори)
    С метода от стандартната библиотека `Module#alias_method`:
    `alias_method :new_method, :old_method`
    Или: `alias_method 'new_method', 'old_method'`

= slide 'Семантика на синоними на методи' do
  list:
    Alias-ите не са обикновени синоними, symlink-ове, указатели и прочее
    Това, което се случва при "alias"-ване на методи, е приблизително еквивалентно на копиране на тялото на оригиналния метод
    Ако модифицирате тялото на оригиналния метод след като сте го "alias"-нали, alias-ът ще запази старото тяло

= slide 'Пример с alias' do
  p Въпреки името си, <code>alias</code> прави копие на метод.

  annotate:
    class Array
      alias old_reduce reduce

      def reduce(*args, &block)
        puts "I see you are using #reduce. Let me help!"
        old_reduce(*args, &block) * 0.01
      end
    end

    [1, 2, 3, 4, 5, 6].reduce { |a, b| a + b } # =>

= slide 'Синоними на методи' do
  p Пример за реална употреба:
  .action
    example:
      def to_s
        to_html
      end
  .action
    p По-добре да се запише така:
    example:
      alias_method :to_s, :to_html
  .action
    p Или така:
    .action
      example:
        alias to_s to_html

= slide 'Разлики между alias и alias_method' do
  list:
    На първо място, `alias` е ключова дума, докато `alias_method` е обикновен метод от `Module` (клас макро)
    От горното следват и повечето разлики между двете:
    При `alias` може да подавате като аргументи направо идентификатори на методи, например:
    `alias original_to_s to_s` ще направи нов синоним на `to_s` под името `original_to_s`
    `alias_method original_to_s, to_s` ще интерпретира `original_to_s` и `to_s` като имена на променливи
    Зад тези имена трябва да стои низ или символ, указващ име на метод
    По този начин може да правите синоними на методи динамично, докато с `alias` това не става

= slide 'Разлики между alias и alias_method', 'създаване на синоними по време на изпълнение' do
  annotate:
    class Array
      [:size, :count, :length].each do |method_name|
        alias_method "old_#{method_name}", :size
      end

      def size
        0
      end
    end

    [1, 2, 3].size     # =>
    [1, 2, 3].old_size # =>

= slide 'Забележки относно синоними на методи' do
  list:
    Някои инструменти, които генерират документация от вашия код, имат проблеми с тази техника
    Тъй като `alias` е ключова дума и подлежи на статичен синтактичен анализ, такива инструменти разпознават тези синоними
    За разлика от това, `Module#alias_method` обикновено не се разпознава в тези случаи, понеже не може да ползвате статичен синтактичен анализ за целта

= slide 'Именувани пространства' do
  p Класовете и модулите могат да служат като именувани пространства.

  annotate:
    module Useless
      class Thing
      end
    end

    class Grandfather
      class StraightRazor
      end
    end

    Useless::Thing.new             # =>
    Grandfather::StraightRazor.new # =>

= slide 'Именувани пространства (2)' do
  p Ако се намирате в модул, няма нужда да ползвате пълния път до константите:

  annotate:
    module Useless
      class Thing
      end

      Thing.new         # =>
    end

    Useless::Thing.new  # =>
    Thing.new           #!

= slide 'Търсене на променливи в Ruby' do
  ul
    li Променливите в Ruby се търсят лексикално, докато не се стигне до "scope gate".
    li Scope gate-ове в Ruby са <code>def</code>, <code>module</code> и <code>class</code>
    li Важи и за полета (<code>@foo</code>)

  example:
    bacon = 2

    def foo
      chunky = 10

      1.times do
        chunky       # 10
        chunky = 44
      end

      chunky         # 44
      bacon          # error: NameError
    end

    foo()

= slide 'Правила за търсене на константи' do
  list:
    Константите и променливите в Ruby се търсят по различен начин
    Константите са организирани в дървовидна структура
    Всеки ред код се намира някъде в тази дървовидна структура
    Когато напишете константа, тя се търси първо в текущия клон, след което в родителите
    `module` и `class` ви местят из дървото на константите
    Може да достъпите константа в "корена" с `::` отпред (`::Foo`)
    "Коренът" на константите са тези, дефинирани в `Object`

= slide 'Малък пример' do
  annotate:
    PLACE = 'root'
    module Outer
      PLACE = 'intermediate'
      module Inner
        PLACE = 'deep'
      end
    end

    PLACE               # =>
    Outer::Inner::PLACE # =>
    module Outer
      module Inner
        PLACE           # =>
        ::PLACE         # =>
      end
      PLACE             # =>
      Inner::PLACE      # =>
    end

= slide 'Класови методи' do
  p Може да дефинирате класови методи така:

  annotate:
    class Something
      def Something.answer
        42
      end
    end

    Something.answer   # =>

= slide 'Класови методи (2)' do
  p Не може да ги викате неквалифицирано от инстанцията:

  annotate:
    class Something
      def Something.answer
        42
      end

      def do_stuff
        answer             #!
        Something.answer   # =>
      end
    end

    thing = Something.new
    thing.answer           #!
    Something.answer       # =>

    thing.do_stuff

= slide 'Класови методи (3)' do
  p Достъпни са в наследниците:

  annotate:
    class Base
      def Base.answer() 42 end
    end

    class Derived < Base
      def Derived.say_answer
        answer         # =>
        Base.answer    # =>
      end
    end

    Derived.answer     # =>
    Base.answer        # =>

    Derived.say_answer

= slide 'Класови методи (4)' do
  p Има и други начини за дефиниция на класови методи:

  list:
    Този начин, който ви показахме, е неканоничният
    Кои са другите начини, ще разберете в следващите лекции

= slide 'Класови методи (5)' do
  list:
    Показахме ви как се дефинират и викат
    Не ви показахме как са реализирани и къде стоят
    Имат доста оплетена семантика в Ruby
    Засега се опитвайте да не ползвате класови методи

= slide 'Присвояване' do
  list:
    `answer = 42`
    Тривиално, нали?
    Всяко присвояване е израз и има върната стойност
    Може да правите "паралелно присвояване"

= slide 'Паралелно присвояване', 'прост пример' do
  annotate:
    a, b = 1, 2
    a              # =>
    b              # =>

    a, b = b, a
    a              # =>
    b              # =>

  p Има няколко различни случая, които ще разгледаме.

= slide 'Паралелно присвояване', 'присвояване на една променлива' do
  annotate:
    a = 1, 2, 3
    a # =>

  p Практически същото като <code>a = [1, 2, 3]</code>

= slide 'Паралелно присвояване', 'разпакетиране на дясната страна' do
  annotate:
    a, b = [1, 2, 3]
    a # =>
    b # =>

    a, b = 1, 2, 3
    a # =>
    b # =>

  list:
    Излишните аргументи вдясно се игнорират
    Скобите са "опционални" в този случай
    Ако вляво имате повече променливи отколкото вдясно, те ще получат стойност <code>nil</code>

= slide 'Паралелно присвояване', 'със splat аргументи' do
  annotate:
    head, *tail = [1, 2, 3]
    head   # =>
    tail   # =>

    first, *middle, last = 1, 2, 3, 4
    first  # =>
    middle # =>
    last   # =>

  list:
    <code>middle</code> и <code>tail</code> обират всичко останало
    Очевидно, може да имате само една splat-променлива на присвояване

= slide 'Паралелно присвояване', 'splat аргументи отдясно' do
  annotate:
    first, *middle, last = 1, [2, 3, 4]
    first  # =>
    middle # =>
    last   # =>

    first, *middle, last = 1, *[2, 3, 4]
    first  # =>
    middle # =>
    last   # =>

= slide 'Вложено присвояване' do
  annotate:
    head, (title, body) = [1, [2, 3]]
    head   # =>
    title  # =>
    body   # =>

  list:
    Скобите ви позволяват да влезете едно ниво "навътре" и да разбиете подаден списък на променливи
    Не сте ограничени само до две нива (това работи: <code>head, (title, (body,)) = [1, [2, [3]]]</code>)
    Можете да ги комбинирате с паралелното присвояване, за да правите сложни магарии

= slide 'Вложено присвояване и splat-ове' do
  annotate:
    head, (title, *sentences) = 1, [2, 3, 4, 5, 6]
    head      # =>
    title     # =>
    sentences # =>

  list:
    Може да имате по една звездичка на "ниво" (т.е. скоби)

= slide 'Ред на оценка' do
  p Бележка за реда на оценка при присвояване — първо отдясно, след това отляво:

  annotate:
    x = 0
    a, b, c = x, (x += 1), (x += 1)
    x # =>
    a # =>
    b # =>
    c # =>

= slide 'Променливата _' do
  list:
    Носи семантика на placeholder ("този аргумент не ми трябва")
    Освен тази семантика, в Ruby е и малко по-специална

= slide 'Променливата _' do
  p Може да ползвате едно име само един път, когато то се среща в списък с параметри на метод, блок и прочее.

  example:
    Proc.new { |a, b, a| } # SyntaxError: duplicated argument name
    Proc.new { |_, b, _| } # => #<Proc:0x007f818af68de0@(irb):23>

  p Горното важи не само за блокове, но и за методи.

= slide 'Присвояване в Ruby', 'Къде важат тези правила?' do
  list:
    Очевидно, при нормално присвояване
    Това включва и връщана стойност от метод, например <code>success, message = execute(job)</code>
    При разгъване на аргументи на блокове, например:

  .action
    example:
      [[1, [2, 3]], [4, [5, 6]], [7, [8, 9]]].each do |a, (b, c)|
        puts "#{a}, #{b}, #{c}"
      end
      # 1, 2, 3
      # 4, 5, 6
      # 7, 8, 9

  list:
    Донякъде и при разгъване на аргументи на методи (бройката трябва да отговаря)
    Запомнете ги

= slide 'Присвояване в Ruby' do
  p Имате ли въпроси по тази тема?

= slide 'Quine', 'програма, принтираща кода си' do
  example:
    ->_{_%_}["->_{_%%_}[%p]"]

= slide 'Quine', 'to the eleven' do
  example:
    v=0000;eval$s=%q~d=%!^Lcf<LK8,                  _@7gj*LJ=c5nM)Tp1g0%Xv.,S[<>YoP
    4ZojjV)O>qIH1/n[|2yE[>:ieC       "%.#%  :::##"       97N-A&Kj_K_><wS5rtWk@*a+Y5
    yH?b[F^e7C/56j|pmRe+:)B     "##%      ::##########"     O98(Zh)'Iof*nm.,$C5Nyt=
    PPu01Avw^<IiQ=5$'D-y?    "##:         ###############"    g6`YT+qLw9k^ch|K'),tc
    6ygIL8xI#LNz3v}T=4W    "#            #.   .####:#######"    lL27FZ0ij)7TQCI)P7u
    }RT5-iJbbG5P-DHB<.   "              ##### # :############"   R,YvZ_rnv6ky-G+4U'
    $*are@b4U351Q-ug5   "              #######################"   00x8RR%`Om7VDp4M5
    PFixrPvl&<p[]1IJ   "              ############:####  %#####"   EGgDt8Lm#;bc4zS^
    y]0`_PstfUxOC(q   "              .#############:##%   .##  ."   /,}.YOIFj(k&q_V
    zcaAi?]^lCVYp!;  " %%            .################.     #.   "  ;s="v=%04o;ev"%
    (;v=(v-($*+[45,  ":####:          :##############%       :   "  ])[n=0].to_i;)%
    360)+"al$s=%q#{  "%######.              #########            "  ;;"%c"%126+$s<<
    126}";d.gsub!(/  "##########.           #######%             "  |\s|".*"/,"");;
    require"zlib"||  "###########           :######.             "  ;d=d.unpack"C*"
    d.map{|c|n=(n||  ":#########:           .######: .           "  )*90+(c-2)%91};
    e=["%x"%n].pack   " :#######%           :###### #:          "   &&"H*";e=Zlib::
    Inflate.inflate(   "  ######%           .####% ::          "   &&e).unpack("b*"
    )[0];22.times{|y|   "  ####%             %###             "   ;w=(Math.sqrt(1-(
    (y*2.0-21)/22)**(;   " .###:             .#%             "   ;2))*23).floor;(w*
    2-1).times{|x|u=(e+    " %##                           "    )[y*z=360,z]*2;u=u[
    90*x/w+v+90,90/w];s[(    " #.                        "    ;y*80)+120-w+x]=(""<<
    32<<".:%#")[4*u.count((     " .                   "     ;"0"))/u.size]}};;puts\
    s+";_ The Qlobe#{" "*18+ (       "#  :#######"       ;"Copyright(C).Yusuke End\
    oh, 2010")}";exit~;_ The Qlobe                  Copyright(C).Yusuke Endoh, 2010

= slide 'Quine' do
  p Може да пуснете quine-а от предния слайд като го запазите във файл <code>quine.rb</code> и ползвате това скриптче:

  example:
    #!/bin/sh

    while true
    do
      ruby quine.rb | tee quine_result
      mv quine_result quine.rb
      sleep 0.2
    done

= slide 'Constant Autoloading in Rails', '🎉 bonus 🎉' do
  list:
    Константите са наглед дребна част от езика, но всъщност дълбока
    За интересуващите се от Rails, там работите стават още по-сложни заради autoloading-а
    Повече по темата за константите и autoloading-а им в Rails може да видите в тази лекция:
    ["Constant Autoloading in Rails" by Xavier Noria](http://2012.baruco.org/agenda/constant-autoloading-in-ruby-on-rails)
    Ще продължим да разгледаме именованите пространства и таблиците с константите в следващата лекция
