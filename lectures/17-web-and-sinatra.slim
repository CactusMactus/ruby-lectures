= slide 'Днес' do
  list:
    Програмиране за web с Ruby
    HTTP сървъри, deployment и Rack
    Sinatra

= slide 'Уеб с Ruby' do
  list:
    Много подходящ за тази цел
    Популярен главно заради <a href="http://rubyonrails.org/">Ruby on Rails</a>
    Има и други начини за писане на уеб с Ruby

= slide 'Как работи?' do
  list:
    Клиент (браузър) → HTTP сървър → Ruby (Rack) → Ruby (App)
    "Ruby (App)" обикновено е вашият код + някаква друга библиотека за уеб (Rails, Sinatra, ...)
    Допустимо е и HTTP сървърът да е на Ruby
    Последното се прави обикновено само в development режим
    Какво е Rack?

= slide 'Rack' do
  blockquote
    | Rack provides a minimal, modular and adaptable interface for developing web applications in Ruby. By wrapping HTTP requests and responses in the simplest way possible, it unifies and distills the API for web servers, web frameworks, and software in between (the so-called middleware) into a single method call.
  p.action Rack в GitHub: #{github_repo 'rack/rack'}

= slide 'Примерно Rack-приложение' do
  p Запазете следния код във файл <code>config.ru</code> и пуснете с <code>rackup config.ru</code>:

  example:
    hello_world_app = proc do |env|
      [200, {'Content-Type' => 'text/plain'}, ['Hello, World!']]
    end

    run hello_world_app

  p Предполага се, че сте си инсталирали библиотеката <code>rack</code>. Можете да направите това с <code>gem install rack</code>.

= slide 'Вход' do
  list:
    За вход вашето Rack-приложение приема единствен аргумент - `env`
    Той съдържа хеш с всичката ви необходима информация, за да отговорите
    Cookies, информация за клиента (браузъра), налични сесии, информация за сървъра...

= slide 'Вход', 'нека го инспектираме' do
  example:
    dump_env = proc do |env|
      body = env.map { |key, value| "#{key}: #{value}" }.join("\n")
      [200, {'Content-Type' => 'text/plain'}, [body]]
    end

    run dump_env

= slide 'Вход' do
  pre
    |
      SERVER_SOFTWARE: thin 1.3.1 codename Triple Espresso
      SERVER_NAME: localhost
      rack.input: #&lt;Rack::Lint::InputWrapper:0x007fbe7b8484b0&gt;
      rack.version: [1, 0]
      rack.errors: #&lt;Rack::Lint::ErrorWrapper:0x007fbe7b848438&gt;
      rack.multithread: false
      rack.multiprocess: false
      rack.run_once: false
      REQUEST_METHOD: GET
      REQUEST_PATH: /
      PATH_INFO: /
      REQUEST_URI: /
      HTTP_VERSION: HTTP/1.1
      HTTP_HOST: localhost:9292
      HTTP_CONNECTION: keep-alive
      HTTP_CACHE_CONTROL: max-age=0
      HTTP_USER_AGENT: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11
      HTTP_ACCEPT: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
      HTTP_ACCEPT_ENCODING: gzip,deflate,sdch
      HTTP_ACCEPT_LANGUAGE: en-US,en;q=0.8
      HTTP_ACCEPT_CHARSET: ISO-8859-1,utf-8;q=0.7,*;q=0.3
      GATEWAY_INTERFACE: CGI/1.2
      SERVER_PORT: 9292
      QUERY_STRING:
      SERVER_PROTOCOL: HTTP/1.1
      rack.url_scheme: http
      SCRIPT_NAME:
      REMOTE_ADDR: 127.0.0.1
      async.callback: #&lt;Method: Thin::Connection#post_process&gt;
      async.close: #&lt;EventMachine::DefaultDeferrable:0x007fbe7b8443b0&gt;

= slide 'Изход' do
  list:
    Трябва да върнете списък с три елемента:
    `[http_status_code, headers, content]`
    `http_status_code` е число, по HTTP спецификацията (напр. 200 или 404)
    `headers` е хеш с HTTP хедъри
    `content` е нещо, което трябва да отговаря на `each` и да връща низове

= slide 'The Rack lobster' do
  list:
    Малко примерно Rack приложение
    Свалете [lobster.rb](17/lobster.rb) и [lobster.ru](17/lobster.ru)
    Пуснете го с `rackup lobster.ru`
    Отворете [localhost:9292](http://localhost:9292/)

= slide 'Rack-посредници', '= Rack middleware' do
  list:
    Rack философията е базирана на т. нар. middleware
    Middleware може е всеки Rack app
    Образува се верига от вложени един в друг middleware компоненти
    Който е най-отпред, е с най-висок "приоритет"
    Request-ът минава през всеки по веригата
    Всеки може да реши дали да извика следващия по веригата, или направо да върне резултат
    Вкарвате ги с `use SomeMiddleware`

= slide 'Rack-посредници', 'примери' do
  list:
    `Rack::Runtime` добавя `X-Runtime` хедър
    `Rack::ShowExceptions`
    `Rack::ShowStatus`
    `Rack::Sendfile`
    `Rack::Logger`
    `Rack::Lock`
    `Rack::ETag`, `Rack::ContentLength`, `Rack::Chunked`...
    [Още много...](https://github.com/rack/rack/blob/master/lib/rack)

= slide 'Поддържани уеб сървъри' do
  pre
    |
      Mongrel               Ebb
      EventedMongrel        Fuzed
      SwiftipliedMongrel    Glassfish v3
      <strong>WEBrick</strong>               <strong>Phusion Passenger</strong>
      FCGI                  <strong>Puma</strong>
      CGI                   Rainbows!
      SCGI                  <strong>Unicorn</strong>
      LiteSpeed             unixrack
      <strong>Thin</strong>                  Zbatery

= slide 'Поддържани уеб библиотеки' do
  pre
    |
      Ruby on Rails   Coset
      Padrino         Halcyon
      Sinatra         Mack
      Sin             Maveric
      Vintage         Merb
      Waves           Camping
      Wee             Ramaze

  p …и много други.

= slide 'Deployment на production' do
  list:
    Пред HTTP-сървъра, интегриран с Rack, обиновено има и друг HTTP сървър/прокси
    Например Nginx, Apache или някое HTTP прокси
    Горните са много добри в сервиране на статично съдържание
    Помагат и за load-balancing
    Обикновено има и няколко Ruby-процеса, които са заредили Rack-приложения и обработват заявки
    "Application server" модел - кодът стои зареден в паметта

= slide 'В development режим' do
  list:
    В режим на разработка обикновено се ползва само един Rack-supported HTTP съръвр
    За простота понякога дори и WEBrick
    Още thin/mongrel/passenger
    Имплементирани са различни схеми за автоматично презареждане на файлове при промяна
    Горното се налага заради "application server" модела

= slide 'Ruby (App)', 'или къде обикновено пишем нашия уеб код' do
  list:
    Клиент (браузър) → HTTP сървър → Ruby (Rack) → Ruby (App)
    Където Ruby (App) може да бъде:
    Голо Rack приложение (видяхме примери за това)
    Sinatra приложение
    Padrino приложение
    Ruby on Rails приложение
    И прочее...

= slide 'Sinatra' do
  blockquote
    |
      Sinatra is a domain-specific language for building websites, web services, and web applications in Ruby. It emphasizes a minimalistic approach to development, offering only what is essential to handle HTTP requests and deliver responses to clients.
  p — Из "Sinatra Up and Running"
  p Официален сайт: <a href="http://www.sinatrarb.com/">sinatrarb.com</a>, GitHub проект: #{github_repo 'sinatra/sinatra'}

= slide 'Sinatra' do
  list:
    DSL + API, удобни за писане на (по-прости) уеб приложения
    Основно ядро < 2 KLOC Ruby
    Тънък слой над Rack
    Lightweight

= slide 'Sinatra', 'не е фреймуърк' do
  list:
    Не ви налага почти нищо
    Няма вградено ORM
    Няма файлова структура по подразбиране
    Няма дифолтни конфигурационни файлове, генератори или подобни

= slide 'Sinatra vs. Padrino vs. Rails' do
  list:
    Sinatra - не е фреймуърк
    Padrino - мини фреймуърк (има ORM, структура на файловете)
    Rails - мастодонт; има мнение за почти всичко; The Rails Way™
    The right tool for the right job

= slide 'Обратно към Sinatra', 'инсталация' do
  list:
    Разпространява се като Ruby gem, подобно на другите
    `gem install sinatra`
    `require 'sinatra'` и сте в играта
    Опционално, може да сложите и Thin (`gem install thin`)
    Sinatra ще ползва него вместо WEBrick, ако го има

= slide 'Модели на разработка' do
  list:
    Два модела на разработка:
    Класически
    Модулен (modular)

= slide 'Класически модел' do
  list:
    DSL-ът е миксиран в Object
    Максимум един app в рамките на Ruby процес
    Бърз и удобен
    Не се счита за лоша практика да го ползвате
    Получавате него като направите `require 'sinatra'`

= slide 'Модулен модел' do
  list:
    Ползвате само `require 'sinatra/base'`
    Правите клас, наследяващ от `Sinatra::Base`
    DSL-ът не се миксира в Object
    Ако имате малко по-сложни проекти
    Ако искате да имате повече от един Sinatra app в рамките на един Ruby процес
    Ако правите gem/библиотека, която съръжа Sinatra приложение за вграждане другаде

= slide 'Hello, World!', 'пример в класически стил' do
  example:
    require 'sinatra'

    get '/' do
      'Booyah!'
    end

  p Пускате с <code>ruby booyah.rb</code> и тествате, например с <code>telnet</code>
  p Какво става, ако поискаме несъществуващ адрес?

= slide 'Грешки: 404' do
  img src="17/404.png" style="max-width: 90%; max-height: 70%;"

= slide 'Грешки' do
  list:
    Sinatra се грижи да прихване 404 и 500
    500 = Internal Server Error
    За последното получаваме и удобен backtrace

= slide 'Маршрути (routes)' do
  list:
    DSL-ът на Sinatra е тясно свързан с т. нар. HTTP verbs
    Поддържани: `GET`, `POST`, `PUT`, `DELETE`, `PATCH`, `HEAD`, `OPTIONS`
    Indempotence: `GET`, `HEAD`, `PUT`, `DELETE`
    Един маршрут: HTTP verb + URL path
    Следователно, `get '/'` != `post '/'`

= slide 'Параметри' do
  list:
    Може да ги достъпвате в тялото на даден маршрут през `params[:param_name]`
    Имате достъп до три вида параметри там:
    URL параметри
    Query string параметри
    Параметри от тялото на post-заявка

= slide 'Параметри в URL-а' do
  example:
    get '/greet/:name' do
      "Hey there, #{params[:name]}!"
    end

= slide 'Wildcard маршрути и приоритет' do
  list:
    Може да ползвате `*` в дефиниця на маршрут
    Това е greedy
    Ще е достъпно през `params[:splat]`
    Оценката на маршрутите спира след "първото достатъчно съвпадение"
    Приоритетът е отгоре надолу, т.е. в реда, в който сте ги дефинирали
    Може да подадете и регулярен израз като параметър на `get`, `post`, ...

= slide 'Камък, ножица, хартия', 'малко по-голям пример' do
  list:
    Сваляте [game.rb](17/game.rb)
    Пускате с `ruby game.rb`
    Играете на [localhost:4567/play/some_move](http://localhost:4567/play/paper)

= slide 'Камък, ножица, хартия (2)' do
  example:
    require 'sinatra'

    weaker_moves = {rock: :scissors, paper: :rock, scissors: :paper}
    valid_moves  = weaker_moves.keys

    before { content_type :txt }

    get '/play/:move' do
      # Игрова логика
    end

= slide 'Камък, ножица, хартия (3)', 'валидация на входа' do
  example:
    get '/play/:move' do
      player_move = params[:move].to_sym

      unless valid_moves.include?(player_move)
        halt 403, "You must throw one of the following: #{valid_moves.join(', ')}"
      end
    end

= slide 'Камък, ножица, хартия (4)', 'изкуствен интелект' do
  example:
    get '/play/:move' do
      # Проверка за валиден ход...

      computer_move = weaker_moves.keys.sample
    end

= slide 'Камък, ножица, хартия (5)', 'игрова логика' do
  example:
    get '/play/:move' do
      # Проверка за валиден ход...
      # Изкуствен интелект...

      if player_move == computer_move
        "Oh, my!\nIt's a tie!"
      elsif computer_move == weaker_moves[player_move]
        "Nicely done, #{player_move} beats #{computer_move}!"
      else
        "Ouch... You got trashed, #{computer_move} beats #{player_move}. Better luck next time!"
      end
    end

= slide 'Филтри' do
  list:
    `before` и `after` такива
    По подразбиране се изпълняват за всеки request
    Може да им се даде опционален път, само за който да се изпълняват
    Тогава важат същите правила като при `get 'route'`, `post 'route'`, ...
    С `before` може да спрете изпълнението на request-а
    С `after` може да модифицирате резултата, върнат от даден маршрут
    Доста подобно на Rack middleware...

= slide 'Rack middleware в Sinatra' do
  list:
    Може да ползвате всякакъв Rack middleware във вашето Sinatra приложение
    Става с DSL-метода `use SomeMiddleware`
    Например, `use Rack::Runtime`, или `use Rack::Chunked`...

= slide 'Контекст на оценка на маршрутите' do
  list:
    Блокът на всеки маршрут се оценява в контекста на инстанция на някакъв обект
    В контекта на същата инстанция се оценяват и филтрите
    Всеки request си има собствена такава инстанция
    Животът на една таква инстанция е, общо-взето, един request
    Следователно, може да споделяте инстанционни променливи между блоковете, в рамките на един request
    Инстанцията е на класа `Sinatra::Application` (подробности за това по-късно)

= slide 'halt, pass и redirect' do
  list:
    `halt` прекратява обработката на request-а и връща отговор
    Опционално приема HTTP статус код, и също опционално, текст, който да върне
    `pass` предава изпълнението на следващия маршрут, според приоритета
    `redirect` кара HTTP клиента да зареди нов URL
    Последното слага един header и след това вика `halt` вътрешно
    Може да подадете аргументи на `redirect` за да укажете дали е временен или траен

= slide 'Статични файлове' do
  list:
    Sinatra сервира статични файлове автоматично, ако сте ги сложили в папка `public`
    Ако имате `public/foo/bar.js` редом до вашето приложение, следното ще работи:
    `http://localhost:4567/foo/bar.js` (забележете, че `public` липсва от пътя)
    В случай на конфликт, статичните файлове са с по-висок приоритет от вашите маршрути
    Може да промените къде се търсят тези файлове с конфигурационна опция

= slide 'Динамични изгледи', 'още темплейти' do
  list:
    Sinatra ползва Tilt
    Tilt: "Generic interface to multiple Ruby template engines"
    Чрез него ви дава достъп до купчина темплейтни формати
    Erb, Haml, Slim, Markdown, ...
    Могат да бъдат вградени или външни

= slide 'Динамични изгледи', 'пример' do
  example:
    get '/' do
      # Ще върне низ с рендерирания Erb темплейт, кръстен "index"
      erb :index
    end

= slide 'Рендериране' do
  list:
    Викат се с `template_handler_name :path_to_template`
    Връщат текстов низ с рендерирания темплейт
    Името на темплейта трябва да е символ
    Ако подадете низ на template handler, Sinatra ще реши, че подавате съдържанието на темплейта
    Например, `markdown '# This is a heading!'` ще ви върне `'<h1>This is a heading!</h1>'`

= slide 'Вградени темплейти' do
  list:
    Вградените темплейти се намират редом до вашия код
    След стандартния маркер за край на Ruby код `__END__`
    Именувани са с нещо като клас променливи:
    `@@template_name`

= slide 'Вградени темплейти' do
  example:
    get '/' do
      erb :index
    end

    __END__

    @@index
    <h1>Hey, there!</h1>
    <p>The time now is <%= Time.now %></p>

= slide 'Външни темплейти' do
  list:
    Търсят се в папката `views/` по подразбиране
    Това може да се промени с конфигурационна опция
    `erb :index` ще търси `views/index.erb`
    С `erb :'users/show'` ще рендерирате `views/users/show.erb`
    Забележете, че името трябва да се подаде като символ

= slide 'Предаване на данни към темплейтите' do
  list:
    `self`-ът на маршрутите и на view-тата е един и същ
    Може да предавате данни по два основни начина:
    С инстанционни променливи
    С опцията `:locals`, подадена на template handler-а

= slide 'Предаване на данни към темплейтите' do
  example:
    get '/posts/:id' do
      @info = "This is post ID #{params[:id]}"
      erb :post, locals: {title: 'My Blog'}
    end

    __END__

    @@post
    <h1><%= title %></h1>
    <p><%= @info %></p>

= slide 'Прихващане на грешки' do
  list:
    Както казахме, Sinatra прихваща 404 и 500
    Може да промените поведението по подразбиране като ги прихванете
    Това става с DSL-методите `not_found` и `error`:
    `not_found { handle 404 errors }`
    `error { handle internal server errors }`

= slide 'Конфигурационният блок' do
  list:
    Конфигурирате в блок, подаден на `configure`
    Става със `set :option, 'value'`
    Има и `enable/disable :option`
    Горното е синтаксис за `set :option, true/false`
    Достъпно през `settings`
    Environment-aware

= slide 'Environment' do
  list:
    Условен етикет, обозначаващ в каква среда се изпълнява приложението
    Например `production`, `development`, `test`, ...
    По подразбиране е `development`
    Може да се промени със задаване стойност на променливата на обкръжението `RACK_ENV`
    Например `export RACK_ENV="production"` в `~/.bashrc`, ако сте на Unix и ползвате Bash

= slide 'Конфигурационен блок' do
  example:
    configure do
      # Важи за всички обкръжения
      set :public_folder, File.expand_path('../assets', __FILE__)
      set :my_custom_var, 'bar'
    end

    configure :production do
      # Важи само за "production" обкръжение
      set :public_folder, '/var/www/assets'
    end

= slide 'Конфигурационен блок' do
  list:
    Ако подадете блок на `set`, ще получите "динамична" опция
    Дефинира getter, setter и предикат (`foo`, `foo=` и `foo?`)
    `set` всъщност дефинира тези методи като класови в `Sinatra::Application`
    За удобство, има и инстанционен, и класов метод `settings` (връщат `self`)
    Може да го достъпвате и в DSL-а (класов контекст)
    Може и в маршрути и изгледи (инстанционен контекст)

= slide 'headers, request и response' do
  list:
    `headers` ви позволява да задавате хедъри на отовора към клиента
    `request` е обект, обгръщащ `env` (което идва от Rack)
    `response` е обект, с който може да манипулирате отговора при нужда

= slide 'Методи на request (1)' do
  pre
    |
      request.accept              # ['text/html', '*/*']
      request.accept? 'text/xml'  # true
      request.preferred_type(t)   # 'text/html'
      request.body                # request body sent by the client (see below)
      request.scheme              # "http"
      request.script_name         # "/example"
      request.path_info           # "/foo"
      request.port                # 80
      request.request_method      # "GET"
      request.query_string        # ""
      request.content_length      # length of request.body
      request.media_type          # media type of request.body
      request.host                # "example.com"

= slide 'Методи на request (2)' do
  pre
    |
      request.get?                # true (similar methods for other verbs)
      request.form_data?          # false
      request["SOME_HEADER"]      # value of SOME_HEADER header
      request.referrer            # the referrer of the client or '/'
      request.user_agent          # user agent (used by :agent condition)
      request.cookies             # hash of browser cookies
      request.xhr?                # is this an ajax request?
      request.url                 # "http://example.com/example/foo"
      request.path                # "/example/foo"
      request.ip                  # client IP address
      request.secure?             # false (would be true over ssl)
      request.forwarded?          # true (if running behind a reverse proxy)
      request.env                 # raw env hash handed in by Rack

= slide 'Бисквитки', 'cookies' do
  list:
    Достъпни през `request.cookies` (връща хеш)
    Манипулация чрез `response.set_cookie` и `response.delete_cookie`
    Не тъпчете много данни там, лашкат се напред-назад с всеки request

= slide 'Сесии' do
  list:
    Трябва да ги разрешите с `configure { enable :sessions }`
    Достъп през метода `session`
    Пазят се в cookie (казва се `rack.session`)
    Криптирани са и ключът се генерира автоматично при старт на приложението
    Може да бъде променен чрез `set :session_secret, 'foo'`
    Не прекалявайте с обема данни при cookie-базираното съхранение

= slide 'Кеширане' do
  list:
    Sinatra дава няколко помощни метода за задаване стойности на HTTP caching хедори
    `expires` (клиентът праща `If-Modified-Since`)
    `cache_control`
    `etag` (слага `ETag`, клиентът праща `If-None-Match`)

= slide 'Стрийминг' do
  list:
    От Sinatra 1.3.0
    Ползвйте Thin, а не WEBrick
    Два вида: краен и безкраен стрийминг

= slide 'Краен стрийминг', 'пример' do
  example:
    get '/stream' do
      stream do |connection|
        connection << "Start of the stream\n"
        sleep 1
        connection << "Some more data\n"
        sleep 1
        connection << "And even more data\n"
      end
    end

= slide 'Безкраен стрийминг', 'пример' do
  example:
    subscribers = []

    get '/listen' do
      stream :keep_open do |subscriber|
        subscriber << "Welcome!\n"
        subscribers << subscriber
      end
    end

    get '/broadcast/:message' do
      message = params[:message]
      subscribers.each do |subscriber|
        subscriber << "#{Time.now}: #{message}\n"
      end
      "Message #{message} sent.\n"
    end

= slide 'Модулен стил' do
  list:
    Без top-level DSL
    `require 'sinatra/base'` вместо `require 'sinatra'`
    `class MyApp < Sinatra::Base ... end`
    DSL-ът вика методи от `Sinatra::Base`
    Следователно, в контекста на нашия клас, все още можем да го ползваме

= slide 'Модулен стил', 'работещ пример' do
  example:
    require 'sinatra/base'

    class Welcome < Sinatra::Base
      get '/' do
        'Welcome to modular Sinatra!'
      end

      run!
    end

= slide 'Модулен стил', 'псевдо-пример' do
  example:
    class Blog < Sinatra::Base
      set :root, 'some/path'

      Article.each do |article|
        get "/#{article.slug}" do
          erb :post, locals: {article: article}
        end
      end

      get '/' do
        @articles = Article.all_sorted_by_publish_date
        erb :index
      end
    end

= slide 'sinatra-contrib' do
  blockquote Collection of common Sinatra extensions, semi-officially supported.
  p GitHub repo: #{github_repo 'sinatra/sinatra-contrib'}

= slide 'Повече информация' do
  list:
    [README-то в официалния сайт](http://www.sinatrarb.com/intro.html)
    Книгата "Sinatra Up and Running" на O'Reilly
    (Тя е за Sinatra 1.3.0, в момента latest stable е 1.4.6)
    Кодът на самия [проект в GitHub](https://github.com/sinatra/sinatra)
