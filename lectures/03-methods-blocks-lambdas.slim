= slide 'Днес' do
  list:
    Методи
    Блокове
    Анонимни функции

= slide 'С-бира-не', 'сряда' do
  list:
    Вместо лекция, тази сряда (19-ти) няма да сме във ФМИ, а на "по бира"
    Има [събитие във Facebook](https://www.facebook.com/events/1080744975313592/)
    Ще бъде в [Bar Road 66](https://www.facebook.com/BarRoad66/), след 19:00

= slide 'Малко въпроси' do
  img src="03/snickers_halloween.jpg"

= slide 'Въпрос 1' do
  p На какво ще се оцени всеки от следните редове:

  example:
    42.equal? 42
    :answer.equal? :answer
    'answer'.equal? 'answer'
    'answer' == 'answer'

  .answer
    list:
      `true`
      `true`
      `false`
      `true`

= slide 'Въпрос 2' do
  p Кой метод на <code>object</code> ще бъде извикан на всеки от следните редове:

  example:
    puts object
    p object
    "A shiny #{object}"

  .answer
    list:
      `to_s`
      `inspect`
      `to_s`

= slide 'Въпрос 3' do
  p Какво ще съдържат променливите <code>a</code>, <code>b</code> и <code>c</code> след изпълнението на следния код:

  example:
    a = {food: 'chocolate cake'}
    b = a
    c = b[:food]
    c.insert 0, 'white '
    b[:food]['cake'] = 'milkshake'

  .answer
    list:
      a #=> {:food=>"white chocolate milkshake"}
      b #=> {:food=>"white chocolate milkshake"}
      c #=> "white chocolate milkshake"

= slide 'Въпрос 4' do
  p Ако имаме следната дефиниция на речник: <code>numbers = {one: :eins, two: :zwei}</code>, какво ще върне всеки един от следните три реда код:

  example:
    numbers[:eins]                  # => ?
    numbers.fetch(:two, :something) # => ?
    numbers.fetch(:four)            # => ?

  .answer
    list:
      `nil`
      `:zwei`
      KeyError

= slide 'Първа задача' do
  list:
    Срокът вече приключи
    Повечето от вас имат коментари
    Скоро ще пуснем тестовете и ще си видите точките
    Разгледайте решенията на колегите си
    Ще публикуваме и нашето решение

= slide 'Първа задача', 'допълнение' do
  list:
    Решението ни използва конструкцията `case`
    Още не сме споменавали за нея на лекции
    `if` също е напълно ОК
    Коментарите ни подлежат на обсъждане - целта е дискусия
    Ако ви се стори, че храним - не е така

= slide 'Втора задача' do
  list:
    Ще я публикуваме днес
    Срокът ще е до идния понеделник, 17:00 ч.
    Започнете по-рано, не е тривиална
    Няма да коментираме, освен при въпроси от вас
    Накрая ще направим обзор на решенията

= slide 'Предизвикателство' do
  list:
    До края на седмицата ще ви дадем първото предизвикателство
    Ще е нещо малко, което можете да решите за 5 мин.
    Носи ви една точка, ако минава всички тестове
    Ще имате 24 часа да го решите
    Следете новините в сайта!

= slide 'Символи и стрингове в хеш' do
  list:
    В `{key: 1}` ключът е `:key`
    В `{'key' => 1}` ключът е `'key'`
    В `{'key': 1}` ключът е `:key` (символ)
    Последното се използва ако има специални символи в името
    Например `{'a-key': 1}` - ключът е символът `a-key`

= slide 'Immutability vs Mutability', 'теория' do
  list:
    Immutable (непроменяем) обект е такъв обект, чието състояние не може да бъде променено
    Mutable (променяем) обект е такъв обект, чието състояние може да бъде променено
    Можете ли да дадете пример за immutable/mutable обекти в Ruby?

  .answer
    list:
      immutable objects - `42`, `:answer`
      mutable objects - `'wartburg'`, `[2, 4, 6]`, `{name: 'Spaghetti', origin: 'Italy'}`

= slide 'Immutability vs Mutability', 'пример' do
  example:
    car = 'wartburg'        # => "wartburg"
    car.insert(-1, 'er')    # => "wartburger"
    car = 'wartburg'.freeze # => "wartburg"
    car.insert(-1, 'er')    # => RuntimeError: can't modify frozen String

= slide 'На почит е да се пише immutable код', '...но защо?' do
  list:
    Код без странични ефекти
    По-лесно е да се разсъждава върху кода
    Конкурентност/паралелност

= slide 'На почит е да се пише immutable код', '...а недостатъци?' do
  list:
    Основният недостатък е от гледна точка на скоростта на изпълнение
    А in-place промените дават добър performance boost

= slide 'Как да пишем immutable код', 'в Ruby' do
  list:
    Използвайте методи, които не променят обекта
    Използвайте документацията, за да намерите такива методи
    `dup`, `clone` (ще говорим за разликите между двата метода в следващи лекции)

= slide 'Методи', 'дефиниране' do
  p
    | Дефинирането става с ключовата дума <code>def</code>. Резултатът от функцията е
      последният оценен израз, ако няма <code>return</code> някъде по-рано.

  example:
    def factorial(n)
      if n == 1
        1
      else
        factorial(n - 1) * n
      end
    end

  p Този код яде стек.
  p Освен това в Ruby няма tail recursion оптимизация.

= slide 'Методи', 'отгоре-отгоре' do
  list:
    В Ruby няма такова нещо като "глобална функция"
    `def` винаги дефинира метод в някакъв клас
    Ако `def` не е в дефиниция на клас, отива като `private` метод на `Object`
    `puts` е пример за нещо такова, както и методите, които дефинирате в irb
    Дефинирането на методи в `Object` е удачно само за кратки скриптове
    Отвъд тях, дефинирането на методи в `Object` е <strong>ужасно</strong> лош стил

= slide 'Методи в съществуващи класове', 'Ще ви трябва за бъдещи домашни' do
  p За да добавите метод в съществуващ клас, например <code>Array</code>, просто "отваряте" класа и дефинирате метода:

  annotate:
    class Array
      def fourty_second
        self[41]
      end
    end

    list     = []
    list[41] = 'The Universe'

    list.fourty_second # =>

= slide 'Методи', 'return' do
  p Можете да излезете от функция с <code>return</code>:

  example:
    def includes?(array, element)
      array.each do |item|
        return true if item == element
      end
      false
    end

  p.action
    ' Разбира се, такава функция е излишна.
      Може да ползвате <code>array.include?(element)</code>.

= slide 'Методи', 'return' do
  p <code>return</code> обикновено използваме за специални случаи:

  example:
    def factorial(n)
      return 1 if n == 1

      factorial(n - 1) * n
    end

= slide 'Методи', 'стойности по подразбиране' do
  p Параметрите в Ruby могат да имат стойности по подразбиране:

  annotate:
    def order(drink, size = 'large')
      "A #{size} #{drink}, please!"
    end

    order 'tea'             # =>
    order 'coffee', 'small' # =>

= slide 'Методи', 'стойности по подразбиране (2)' do
  list:
    Стойностите по подразбиране могат да бъдат всякакъв израз
    "Всякакъв израз" включва и извикване на друга функция
    Оценяват се на всяко извикване
    Сложни изрази за аргументи по подразбиране са лош стил

= slide 'Методи', 'променлив брой аргументи' do
  p
    | Методите в ruby могат да вземат променлив брой аргументи. Параметърът се означава със
      <code>*</code> и при извикване на функцията съдържа списък от аргументите.

  annotate:
    def say_hi(name, *drinks)
      "Hi, I am #{name} and I enjoy: #{drinks.join(', ')}"
    end

    say_hi 'Mityo', 'coffee', 'tea', 'water'
    # =>

= slide 'Методи', 'променлив брой аргументи' do
  p Параметърът за променлив брой аргументи може да е на всяка позиция в дефиницията:

  example:
    def something(*a, b, c)
    end

    def something(a, *b, c)
    end

  p Очевидно може да има само един такъв параметър във функция.

= slide 'Методи', '...и техните приятели, хешовете' do
  p
    ' Когато последният аргумент е хеш, може да изтървете фигурните скоби около него.
      Долните редове правят едно и също:

  example:
    def order(drink, preferences)
    end

    order('Latte', {:size => 'grande', :syrup => 'hazelnut'})
    order 'Latte', {:size => 'grande', :syrup => 'hazelnut'}
    order 'Latte', :size => 'grande', :syrup => 'hazelnut'
    order 'Latte', size: 'grande', syrup: 'hazelnut'

  p Така Ruby симулира извикване на функция с наименовани аргументи. Последният ред работи при версия 1.9+.

= slide 'Методи', '...и хешове, отново' do
  p Често ще видите код в този вид:

  example:
    def order(drink, preferences = {})
    end

    order 'Latte'
    order 'Latte', size: 'grande', syrup: 'hazelnut'

  p
    ' Така <code>preferences</code> е незадължителен и няма нужда да го подавате, ако
      нямате предпочитания.

= slide 'Псевдо-keyword arguments', 'недостатъци' do
  p Този "трик" с хешовете се ползва много, понякога прекалено много. Той има и ред недостатъци:

  list:
    За да ползвате стойност, трябва да я достъпите през променлива (например `preferences[:size]`)
    Задаването на стойности по подразбиране е криво и може да се прави само в тялото на метода
    Например така: `preferences[:size] ||= 'grande'`
    Или така: `preferences = {size: 'grande', syrup: 'hazelnut'}.merge(preferences)`
    Проверката за задължителни keyword args става пак ръчно
    Проверката дали някой не ви е подал "излишни" и непознати ключови думи за аргументи – пак ръчно

= slide 'Истински keyword arguments' do
  p Горните недостатъци и нуждата водят до появата на истински keyword arguments в Ruby 2.0.

  annotate:
    def order(drink, size: 'grande', syrup: nil)
      message = "You ordered a #{size} #{drink}"
      message << " with a #{syrup} syrup" if syrup
      message
    end

    order 'Latte'
    # =>
    order 'Latte', syrup: 'hazelnut'
    # =>
    order 'Latte', filling: 'chocolate'
    #!

= slide 'Задължителни keyword arguments' do
  p Без стойност по подразбиране, keyword аргументът става задължителен:

  annotate:
    def order(drink:, size: 'grande', syrup: nil)
      message = "You ordered a #{size} #{drink}"
      message << " with a #{syrup} syrup" if syrup
      message
    end

    order drink: 'Latte'
    # =>
    order syrup: 'hazelnut', drink: 'Latte'
    # =>
    order
    #!

= slide '**kwargs' do
  p Може да вземете "неизползваните" keyword аргументи в хеш:

  annotate:
    def order(drink:, size: 'grande', **options)
      message = "You ordered a #{size} #{drink}"
      message << " with these options: #{options.inspect}" unless options.empty?
      message
    end

    order drink: 'Latte'
    # =>
    order syrup: 'hazelnut', drink: 'Latte'
    # =>
    order
    #!

= slide 'Истински keyword arguments', 'предимства' do
  list:
    Ако има стойност по подразбиране, тя се задава редом с дефиницията на метода
    Ползвате стойността на аргумента директно, няма нужда от отделна променлива
    Непознати ключови думи, подадени като аргументи, предизвикват грешка
    Липсващи и задължителни ключови думи за аргументи също предизвикват грешка

= slide 'Методи', 'предикати' do
  p
    ' Името на метод може да завършва на <code>?</code>. Това се ползва за методи,
      които връщат лъжа или истина (предикати):

  example:
    def even?(n)
      n % 2 == 0
    end

    even? 2
    even? 3

  p Това е само конвенция.

= slide 'Методи', 'две версии' do
  p
    ' Името на метод може да завършва на <code>!</code>.
      Това се ползва, когато <strong>методът има две версии с различно поведение</strong>:

  example:
    numbers = [4, 1, 3, 2, 5, 0]

    numbers.sort   # връща нов списък
    numbers.sort!  # променя списъка на място

  p В случая, "по-опасният" метод завършва на удивителна.
  p Ако имате само една версия на метод с такова име, не слагайте удивителна.

= slide 'Анонимни функции', 'ламбди' do
  p
    ' Анонимни функции в Ruby се дефинират с <code>lambda</code>. Имат три начина на извикване:

  example:
    pow = lambda { |a, b| a**b }

    pow.call 2, 3
    pow[2, 3]
    pow.(2, 3)

  p
    ' За нещастие, не може да извиквате така: <code>double(2)</code>. Това е несъвместимо с
      изтърваването на скобите при извикването на метод.

= slide 'Анонимни функции', 'ламбди (2)' do
  p Може и така:

  example:
    double = lambda do |x|
      x * 2
    end

  p Важи стандартната конвенция за <code>{ }</code> и <code>do</code>/<code>end</code>.

= slide 'Анонимни функции', 'ламбди (3)' do
  p От 1.9 има по-симпатичен синтаксис за ламбди:

  example:
    say_hi = lambda { puts 'Hi there!' }
    double = lambda { |x| x * 2 }
    divide = lambda { |a, b| a / b }

    say_hi = -> { puts 'Hi there' }
    double = ->(x) { x * 2 }
    divide = -> a, b { a / b }

= slide 'Блокове', 'където става забавно' do
  p
    ' Всеки метод може да приеме допълнителен аргумент, който е "анонимна функция". Може да
      го извикате от метода с <code>yield</code>:

  example:
    def twice
      yield
      yield
    end

    twice { puts 'Ruby rocks!' }

= slide 'Блокове', 'аргументи' do
  p Блокът може да приема аргументи:

  example:
    def sequence(first, last, step)
      current = first
      while current < last
        yield current
        current += step
      end
    end

    sequence(1, 10, 2) { |n| puts n }
    # Извежда 1, 3, 5, 7, 9

= slide 'Блокове', 'стойности' do
  p <code>yield</code> се оценява до стойността на блока:

  annotate:
    def calculate
      result = yield(2)
      "The result for 2 is #{result}"
    end

    calculate { |x| x**2 } # =>

= slide 'Блокове', '#block_given?' do
  p <code>block_given?</code> ще ви каже дали методът е извикан с блок:

  example:
    def i_can_haz_block
      if block_given?
        puts 'yes'
      else
        puts 'no'
      end
    end

    i_can_haz_block                  # no
    i_can_haz_block { 'something' }  # yes

= slide 'Блокове', '& при извикване на метод' do
  p Ако имате ламбда, която искате да подадете като блок, може да ползвате <code>&</code>:

  example:
    is_odd = lambda { |n| n.odd? }

    filter([1, 2, 3, 4, 5], &is_odd)
    filter([1, 2, 3, 4, 5]) { |n| n.odd? }

  p Горните са (почти) еквиваленти. Има малка разлика в някои други случаи.

= slide 'Блокове', 'в сигнатурата' do
  p Ако искате да вземете блока като обект, има начин:

  example:
    def invoke_with(*args, &block)
      block.call *args
    end

    invoke_with(1, 2) { |a, b| puts a + b }

  p.action Тук виждате и как може да викате функция като използвате списък вместо позиционни аргументи.

= slide 'Блокове', 'в сигнатурата (2)' do
  p Може и така:

  annotate:
    def make_block(&block)
      block
    end

    doubler = make_block { |n| n * 2 }
    doubler.call 2 # =>

= slide 'Map, filter, reduce' do
  img src="03/map_filter_reduce_tweet.png"

= slide 'Функционални закачки' do
  p Стандартните функционални неща:

  annotate:
    numbers = [-9, -4, -1, 0, 1, 4, 9]

    positive = numbers.select { |n| n >= 0 }
    # =>
    even = numbers.reject { |n| n.odd? }
    # =>
    squares = numbers.map { |n| n**2 }
    # =>
    roots = numbers.select { |n| n > 0 }.map { |n| n**0.5 }
    # =>

= slide '#reduce', 'ако разбирате това, значи сте ОК' do
  p <code>#reduce</code> свежда списък до единична стойност с някаква операция:

  annotate:
    numbers = [1, 2, 3, 4, 5]

    numbers.reduce(0) { |a, b| a + b }
    # =>
    numbers.reduce(1) { |a, b| a * b }
    # =>

    numbers.reduce { |a, b| a + b }
    # =>
    numbers.reduce { |a, b| "#{a}, #{b}" }
    # =>
