= slide 'Днес' do
  list:
    Още няколко слайда за регулярни изрази
    git
    GIT
    GIT!!!

= slide 'Интерполация в регулярни изрази' do
  p Между другото, регулярните изрази поддържат интерполация:

  annotate:
    name  = /[^@]+/
    host  = /\w+\.(com|net|org)/

    email = /#{name}@#{host}/ # =>

= slide 'Работа с MatchData-обекти' do
  list:
    Това е обектът, който ви връща `Regexp#match`
    Това е обектът, стоящ зад специалната променлива `$~`
    Същият обект се крие и зад `Regexp.last_match`
    Не е `Enumerable`

= slide 'Най-полезни методи на MatchData-обектите' do
  list:
    `MatchData#[група]`, където `група` е номер или име на група, ви връща порцията текст, отговаряща на съответната група
    `MatchData#begin(група)` пък ви връща число — отместването спрямо началото на низа на порцията текст, отговаряща на съответната група
    Пример:
  div.action
    annotate:
      /(\w+)/.match('Some words')[1]              # =>
      /(\w+)/.match('Some words').begin(1)        # =>
      /(?<id>\d+)/.match('ID: 12345')[:id]        # =>
      /(?<id>\d+)/.match('ID: 12345').begin(:id)  # =>

= slide '#pre_match и #post_match методи', 'на MatchData-обектите' do
  list:
    `MatchData#pre_match` (същото като специалната променлива <code>$`</code>) — текстът преди съвпадението
    `MatchData#post_match` (същото като специалната променлива <code>$'</code>) — текстът след съвпадението
    Пример:
  div.action
    annotate:
      match = /(?<number>\d+)/.match 'ID: 12345 (new)'

      match[:number]    # =>
      match.pre_match   # =>
      match.post_match  # =>

= slide 'Специалните променливи' do
  list:
    `$~`, `$'`, `$1`, `$2`, `$3` и прочее
    Не са глобални променливи, а специални - thread-local и method-local, т.е. не са глобално-видими
    Попълват се с резултата от последно изпълнения `match`
    Не само след явно извикване на `Regexp#match`

= slide 'case с регулярни изрази', 'работи благодарение на Regexp#===' do
  example:
    html = '<h1>Header</h1>' # или:
    html = '<img src="http://my/image.src" alt="Kartman Makes Burgers" />'

    case html
      when /(<h(\d)>)(.+)<\/h\2>/
        {header: $3, size: $2}
      when /<a\s+href="([^"]+)">([^<]+)<\/a>/
        {url: $1, text: $2}
      when /<img\s+src="([^"]+)"\s+alt="([^"]+)"\s*\/>/
        {image: $1, alt: $2}
      else
        'unrecognized tag'
    end

    # {:image=>"http://my/image.src", :alt=>"Kartman Makes Burgers"}

= slide 'Методи в String', 'свързани с регулярни изрази' do
  list:
    `String#match`
    `String#=~` и `String#!~`
    `String#sub`, `String#gsub` и вариантите им с `!`
    `String#[]` и `String#slice` - в някои от вариантите си приемат регулярен израз
    `String#index` и `rindex` приемат и регулярен израз
    `String#partition` и `rpartition` и <a href="http://www.ruby-doc.org/core-2.3.3/String.html">други...</a>

= slide 'Пример със String#gsub', 'плюс групи и блок' do
  example:
    'SomeTitleCase'.gsub /(^|[[:lower:]])([[:upper:]])/ do
      [$1, $2.downcase].reject(&:empty?).join('_')
    end

    # "some_title_case"

= slide 'Encoding' do
  p Цитат от документацията:
  blockquote
    |
      A regexp can be matched against a string when they either share an encoding,
      or the regexp’s encoding is US-ASCII and the string’s encoding is ASCII-compatible.

= slide 'Encoding & Unicode' do
  list:
    Регулярните изрази в Ruby 2.1+ носят кодировката на сорс-кода
    Можете да проверите кодировката на даден регулярен израз с `Regexp#encoding`
    Можете да укажете изрична кодировка посредством модификатор; например `/something/u` за `UTF-8`
    Малък пример:

  blockquote.action
    | Rubyのお父さんはまつもとゆきひろさんです。

  .action
    example:
      unicode_test = 'Rubyのお父さんはまつもとゆきひろさんです。'

      /は[[:alpha:]]+さん/.match unicode_test # #<MatchData "はまつもとゆきひろさん">

= slide 'Граници на думи в Unicode-текст' do
  list:
    `\b` в Unicode-текст работи, когато границата на думата е лесно определима
    Например, това ще работи: `/\b[[:alpha:]]\b/.match 'това и онова' # #&lt;MatchData "и"&gt;`
    Горното работи, понеже думата на кирилица е оградена от интервали
    В някои езици, обаче, няма интервали (whitespace) между думите (например китайски, японски)
    Къде са границите на думите в това изречение: `Rubyのお父さんはまつもとゆきひろさんです。`?

= slide 'Граници на думи в Unicode-текст', 'пример' do
  p Например:
  div.action
    example:
      'Ruby no otousan ha Matsumoto Yukihiro san desu.'.gsub(/(\b[[:alpha:]]+\b)/) { "[#{$1}]" }
      # "[Ruby] [no] [otousan] [ha] [Matsumoto] [Yukihiro] [san] [desu]."

  p.action Но:
  div.action
    example:
      'Rubyのお父さんはまつもとゆきひろさんです。'.gsub(/(\b[[:alpha:]]+\b)/) { "[#{$1}]" }
      # "[Rubyのお父さんはまつもとゆきひろさんです]。"

= slide 'Флагове на шаблоните' do
  list:
    Можете да управлявате някои аспекти от поведението на шаблона посредством флагове
    Указват се след края на шаблона, например: `/pattern/flags`
    `i` прави търсенето на съвпадение нечувствително към регистъра на буквите
    `u` кара шаблона да носи задължителна кодировка `UTF-8`
    `m` превръща шаблона в multiline-такъв (в този режим, например, `.` ще съвпада и с нов ред)
    Има и други, които не се ползват толкова често

= slide 'Условия в шаблоните (if)', 'Ново в Ruby 2.0' do
  list:
    Ruby 2.0 и по-нови ползват библиотеката Onigmo за регулярни изрази
    Там има някои нововъведения, например това: `(?(cond)yes|no)`
    `cond` може да е референция към друга група в шаблона, или пък look-ahead/behind
    Пример:

  .action
    annotate:
      regexp = /^(number)?\s*(?(1)\d+|[a-zA-Z]+)$/

      regexp =~ "number 123"   # =>
      regexp =~ "foo"          # =>
      regexp =~ "number baz"   # =>

= slide 'Документация' do
  list:
    `Regexp`: <a href="http://www.ruby-doc.org/core-2.3.3/Regexp.html">http://www.ruby-doc.org/core-2.3.3/Regexp.html</a>
    `MatchData`: <a href="http://www.ruby-doc.org/core-2.3.3/MatchData.html">http://www.ruby-doc.org/core-2.3.3/MatchData.html</a>
    `String`: <a href="http://www.ruby-doc.org/core-2.3.3/String.html">http://www.ruby-doc.org/core-2.3.3/String.html</a>
    През `ri`, например: `ri Regexp#=~`

= slide 'Валидация на просто число с регулярен израз' do
  blockquote
    | Да се напише кратък Ruby expression, който проверява дали дадено число е просто или не,
      посредством употреба на регулярен израз. Резултатът от изпълнението му трябва да е <code>true</code>
      за прости числа и <code>false</code> за всички останали. Неща, които можете да ползвате:
    list:
      Самото число, разбира се.
      Произволни методи от класа `Regexp`
      Подходящ регулярен израз (шаблон)
      Текстовия низ `'1'`.
      `String#*`.
      Някакъв условен оператор (например `if`-`else` или `? … : …`)
      `true`, `false`, ...

= slide 'Решение на проверката за просто число с РИ' do
  list:
    Идеи, предложения?
    `'1' * числото =~ /някакъв регулярен израз/ ? false : true`
    `'1' * 13 =~ /^1?$|^(11+?)\\1+$/ ? false : true`
    Много полезно знание :) Въпроси по израза?
    Регулярният израз тук може да се ползва 1:1 в Python за същата цел

= slide 'Въпроси?' do
  p Like any...



= slide 'Git' do
  list:
    Ще се занимаваме с Git
    Ще погледнем под капака
    Ще го разберем

= slide 'Защо отделяме време, за да говорим за Git?' do
  list:
    Защото очевидно е нещо, което е необходимо и се ползва ежедневно
    Дори да си мислим, че го знаем, все ще има нещо ново, което ще научим
    Git e интересен пример за елегантно и семпло техническо решение на сравнително сложен проблем

= slide 'Version Control System (VCS)', 'Не просто система, следяща промени в код!' do
  list:
    Съхранение
    Сигурност - всичко е обратимо
    Лесна работа в екип
    Различни версии на кода
    Нещо, без което не можем

= slide 'Познавате ли този човек?' do
  img src="16/Linus-Torvalds.jpg"

  h2.action.center Linus Torvalds
  h2.action.center Бащата на Linux
  h2.action.center Създател на Git

= slide 'Малко история', 'Linux kernel' do
  list:
    15,803,499 реда код към юли 2013
    19,509,218 реда за Linux 4.1
    13,708 автори
    ~25 години история

  h2.action Какво е нужно?
  list:
    Бързина
    Много разклонения на кода
    Много възможности
    Децентрализация

= slide 'Централизирана VCS' do
  list:
    Един централен сървър
    Всички теглят и публикуват кода на него
    Локално се пазят само най-необходимите неща

= slide 'Децентрализирана VCS' do
  list:
    Всеки има копие на цялата история
    Често отново има един основен сървър
    Може и изобщо да няма сървъри
    Почти всички операции се правят локално - не е необходима връзка с Интернет
    Когато решите - синхронизирате се с който и да е друг сървър

= slide 'Защо точно git?' do
  list:
    Гъвкавост
    Бързина
    Страшен на пръв поглед, може би и на втори
    Когато разберете как работи, ще ви озари ярка светлина и животът ви вече ще има смисъл
    Ще ви отнеме много време да откриете всичко, на което е способен
    Но не е нужно да знаете всичко, за да ви е полезен

= slide 'В началото беше git init' do
  example:
    git init
  p Създава празно хранилище в текущата директория.

  p.action Виждате папката <code>.git</code> - съхранява всичко, което е нужно за историята.

= slide 'Клониране на хранилище' do
  example:
    git clone https://github.com/fmi/ruby-lectures.git

  list:
    Компресия - сваля се бързо
    Поддържа и други протоколи като `file`, `ssh` и `git`

= slide 'Работната директория (working directory)' do
  list:
    Директорията на проекта - всичко без `.git`
    Текущата версия на файловете

= slide 'Хранилището' do
  list:
    Там се намират файловете, които се следят от Git
    Съхраняват се в `.git`

= slide 'Staging област' do
  list:
    Нарича се и индекс
    Междинна област между работната директория и хранилището
    Съхранява файловете, които ще отидат в следващия commit
    Просто един файл - `.git/index`

= slide 'Отдалечено хранилище' do
  list:
    Друго хранилище
    Най-често се намира на друг компютър
    Може да е просто друга `git` директория
    Локалното и отдалеченото хранилище се синхронизират чрез `git pull` и `git push`
    Може да има повече от едно такова
    А може и да няма нито едно

= slide 'Четирите области' do
  img src="16/git-flow.png"

= slide 'Четирите области' do
  list:
    Един файл може да е в повече от една област едновременно
    Възможно е този файл да е с различно съдържание във всяка една област
    Хранилищата съдържат много версии на един и същ файл

= slide '4 състояния на файл' do
  list:
    `Untracked` - няма версии на този файл в staging областта и локалното хранилище (нов файл)
    `Unmodified` - файлът е с еднакво съдържание в работната директория, staging и хранилището
    `Modified` - файлът е с различно съдържание в работната директория и staging
    `Staged` - файлът е с еднакво съдържание в работната директория и staging, но се различава в хранилището
    Ако не сме променили състоянието на файл в staging, то то е същото като в текущия commit в хранилището

= slide '4 състояния на файл' do
  img src="16/file-states.png"

= slide 'Staging областта', 'добавяне на файлове' do
  example:
    git add new_or_modified.rb
    git add lectures/11
    git add .
  list:
    Добавя един или повече файлове към staging областта.

= slide 'Staging областта', 'информация' do
  example:
    git status
  list:
    Списък с всички променени, изтрити и нови файлове.

= slide 'Staging областта', 'промени' do
  example:
    git diff
  list:
    Промени на файловете в работната директория, спрямо тези в staging областта.
    С опция `--staged` (`--cached` в по-стари версии) - промени на файлове в staging.

= slide 'Staging областта', 'изтриване на файлове' do
  example:
    git rm old.rb
  list:
    Изтрива файл от работната директория.
    Маркира като изтрит в staging.

= slide 'Staging областта', 'премахване на промени' do
  example:
    git reset new_or_modified.rb
    git reset lectures/11
  list:
    Премахва направени промени в staging.
    По подразбиране не променя работната директория.

= slide 'Типове обекти' do
  list:
    Файл (`blob`) - конкретна негова версия (snapshot), компресиран
    Дърво (`tree`) - списък от хешове на файлове и дървета
    `Commit` - за него след малко
    `Tag` - етикет, съдържащ идентификатора на конкретен commit
    Съхраняват се в `.git/objects`
    Всеки обект се идентифицира с `sha1` хеш от съдържанието си

= slide 'Commit', 'Конкретна версия на дърво (snapshot)' do
  p Една конкретна версия на кода.
  p.action Състои се от:
  list:
    Уникален идентификатор
    Автор и committer - може да са различни хора
    Съобщение
    Време на добавяне
    Хеш на предходния commit
    Хеш на дървото, за което се отнася
    Други метаданни

= slide 'История на промените' do
  example:
    git log
    git log --stat
    git log --since=2.weeks
    git log --since=5.days.15.minutes
    git log --until=2013-11-30
    git log --grep 'Proc.new'
    git log --author 'Dimitar Dimitrov'
    git log lectures/01-introduction-to-ruby.slim

= slide 'Commit', 'Да разгледаме' do
  example:
    git show 5fae69568cd5420e13a34c06f6f495ea9bcb9a4e
    git show 5fae695
    git show HEAD
    git show HEAD^
    git show HEAD^^^
    git show HEAD~3
    git diff HEAD~3..HEAD
  list:
    `HEAD` е указател към последния commit
    `HEAD^^^` - Броят стрелкички е поредният номер на commit-a (0 е най-скорошният)
    `HEAD~n` - същото като `HEAD^` с `n` на брой стрелкички

= slide 'Commit', 'Всичко е просто файл' do
  example:
    git cat-file -p 5fae695
  list:
    `5fae695` е част от хеша на commit-a

= slide 'Commit' do
  example:
    git commit
    git commit -m "Fix a typo on slide 3"
  p.action Commit-вайте възможно най-малките, логически свързани промени, които не чупят нищо.
