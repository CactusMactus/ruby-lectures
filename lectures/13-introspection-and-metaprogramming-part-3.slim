= slide 'Днес' do
  list:
    Метапрограмиране
    Още метапрограмиране
    Още за обектния модел на Ruby
    Споменахме ли метапрограмиране?

= slide 'Първи тест' do
  list:
    На 30 ноември (следващата сряда)
    <strong>Нечетните</strong> факултетни номера са от 19:00
    <strong>Четните</strong> номера са от 20:00
    Ако някой има причина да си смени часа - да ни пише по имейл

= slide 'Пета задача' do
  list:
    Ще ви я дадем днес
    Стандартна ООП задача с лек привкус на метапрограмиране

= slide 'Въпрос 1' do
  p Кажете всичко, което знаете за instance променливите.

  .answer.action
    ul
      li Пазят се в обект
      li Достъпни са в наследници
      li Не са директно достъпни извън обекта
      li Трябва да се ползват методи за достъп (напр. <code>attr_accessor</code>)
      li Могат да се достъпят "заобиколно" с <code>instance_variable_get</code> и компания

= slide 'Въпрос 2' do
  p Кой е класът на <code>{}</code>? На <code>Integer</code>? На <code>Class</code>?
  p Кой е родителят на <code>String</code>? На <code>Object</code>? На <code>Class</code>?

  .answer.action
    annotate:
      {}.class == Hash       # =>
      Integer.class == Class # =>
      Class.class == Class   # =>

      String < Object        # =>
      Object < BasicObject   # =>
      Class < Module         # =>

= slide 'Въпрос 3' do
  p Какво прави <code>instance_eval</code>? Ами <code>instance_exec</code>?

  p.answer.action Изпълнява блока с променен <code>self</code>. <code>instance_exec</code> е същото, но може да подава аргументи на блока си.

= slide 'Въпрос 4' do
  p Можем ли да направим така, че вместо изключения, несъществуващи локални променливи или методи да резултират в <code>nil</code>? Как?

  example:
    foo          # => nil
    foo.bar.baz  # => nil

  .answer.action
    p Можем, като предефинираме метода <code>method_missing</code> в <code>BasicObject</code>.

    example:
      class BasicObject
        def method_missing(*) end
      end

= slide 'instance_eval', 'припомняне' do
  annotate:
    some_list = []

    some_list.instance_eval do
      push 5
      push 'foo'
      push :bar
      push [:another, :list]

      size # =>
    end

    some_list # =>

= slide 'Текущ клас' do
  list:
    Освен текущ обект (`self`), има и текущ клас
    Това е класът, в който се дефинират методите с `def`
    Няма ключова дума, която да ви го покаже
    Може би това: `kind_of?(Module) ? name : self.class.name`
    Следи се лесно
    Ключовите думи `class` и `module` го променят

= slide 'Текущ клас', 'пример' do
  annotate:
    def foo() end     # Тук е Object

    class Something
      def bar() end   # Тук е Something

      class OrOther
        def baz() end # Тук е Something::OrOther
      end
    end

= slide 'Текущ клас', '...впрочем, нещо, което не трябва да правите' do
  annotate:
    class Something
      def foo
        def bar
          6 * 9
        end

        bar - 12
      end
    end

    something = Something.new
    something.foo # =>
    something.bar # =>

= slide 'Module#class_eval' do
  p <code>class_eval</code> променя <code>self</code>, и текущия клас:

  annotate:
    def monkey_patch_string
      String.class_eval do
        self # =>

        def answer
          42
        end
      end
    end

    "abc".respond_to? :answer # =>
    monkey_patch_string
    "abc".respond_to? :answer # =>

= slide 'Module#module_eval' do
  p <code>Module#module_eval</code> е синоним на <code>Module#class_eval</code>.

= slide 'Въпроси дотук?' do
  p Очакват ни <code>define_method</code>, чистото зло – <code>eval</code> и binding.

= slide 'Три сродни метода' do
  list:
    `send` – извикване на метод, ако имате името му в променлива
    `method_missing` – "отговаряне" на несъществуващи методи
    `define_method` – динамично създаване на методи

= slide 'Module#define_method' do
  annotate:
    class Something
      define_method :foo do |arg|
        "!#{arg}! :)"
      end
    end

    Something.new.foo('a') # =>

= slide 'Module#define_method (2)' do
  annotate:
    class Something
      METASYNTACTIC = %w[foo bar baz]

      METASYNTACTIC.each do |name|
        define_method name do |arg|
          "!#{arg}! :)"
        end
      end
    end

    Something.new.bar('a') # =>
    Something.new.baz('a') # =>

= slide 'Module#define_singleton_method' do
  p Като `define_method`, но прави класов метод, не инстанционен.

  annotate:
    class Something
      define_singleton_method :foo do |arg|
        "!#{arg}! :)"
      end
    end

    Something.foo('a') # =>
    Something.new.foo('a') #!

= slide 'eval' do
  p <code>eval(text)</code> изпълнява код в низ

  annotate:
    things = []
    eval 'things << 42'
    things    # =>

  list:
    Зло ли е `eval`?
    Иска ли питане.

= slide 'Binding' do
  list:
    Всеки Ruby израз има достъп до някакви (локални) променливи
    Сборът от тези променливи се нарича "binding"
    Това е доста популярна думичка; понякога се нарича и "closure"
    Можете да вземете обект, който представлява binding
    И да изпълнявате код върху него

= slide 'Kernel#binding' do
  annotate:
    x = 1_024

    vars = binding

    vars           # =>
    vars.eval('x') # =>

= slide 'Kernel#binding (2)' do
  example:
    x = 1_024

    def foo
      y = 42
      binding
    end

    vars = foo
    vars.eval('y') # 42
    vars.eval('x') # error: NameError

= slide 'Binding', 'други методи' do
  list:
    Binding-обектите имат и методи `local_variable_[gs]et`
    Тези методи са от Ruby 2.1 насам

= slide 'Binding', 'вложеност' do
  list:
    Най-просто, това е лексикалният scope в момента
    Всеки блок вижда променливите в блока, в който се съдържа
    Ако блокът дефинира нова променлива, тя не отива в "родителските" му блокове
    Ако промени текуща променлива, промяната остава
    Помните ли scope gate-овете?

= slide 'Scope gates' do
  p <code>module</code>, <code>class</code> и <code>def</code> секват binding-а

  example:
    top_level = 1
    module Something
      in_module = 2
      class Other
        in_class = 3
        def larodi
          top_level # error: NameError
          in_module # error: NameError
          in_class  # error: NameError
        end
      end
    end

    Something::Other.new.larodi

= slide 'Scope gates', 'заобикаляне' do
  p Scope gate-овете могат да се заобиколят с <code>define_method</code>, <code>Class.new</code> и <code>Module.new</code>.

= slide 'Scope gates', 'define_method' do
  example:
    top_level = 1
    module Something
      in_module = 2
      class Other
        in_class = 3
        define_method :larodi do
          top_level # error: NameError
          in_module # error: NameError
          in_class  # 3
        end
      end
    end

    Something::Other.new.larodi

= slide 'Scope gates', 'Class.new' do
  example:
    top_level = 1
    module Something
      in_module = 2
      Other = Class.new do
        in_class = 3
        define_method :larodi do
          top_level # error: NameError
          in_module # 2
          in_class  # 3
        end
      end
    end

    Something::Other.new.larodi

= slide 'Scope gates', 'Module.new' do
  example:
    top_level = 1
    Something = Module.new do
      in_module = 2
      Other = Class.new do
        in_class = 3
        define_method :larodi do
          top_level # 1
          in_module # 2
          in_class  # 3
        end
      end
    end

    Other.new.larodi

  .action
    p Обърнете внимание, че тук <code>Other</code> се дефинира в root namespace-а.

= slide 'def object.method' do
  p Може да (пре)дефинирате метод в конкретен обект.

  annotate:
    things = [22, :f, 'Sofia']

    def things.size
      -5
    end

    def things.asl
      "#{self[0]}/#{self[1]}/#{self[2]}"
    end

    things        # =>
    things.size   # =>
    things.length # =>
    things.asl    # =>

    [].asl        #!
    [].size       # =>

= slide 'Singleton класове', 'обяснението на предишния слайд' do
  list:
    Само модули могат да съдържат методи
    Когато дефинирате метод на конкретен обект, Ruby го добавя в специален клас за този обект
    Всеки обект има специален клас, наречен singleton class, който съдържа уникалните за него методи
    Горното е полу-истина. Такъв клас се създава само ако има нужда
    Известен е още като metaclass, eigenclass и "собствен клас"

= slide 'Singleton класове', 'визуализация' do
  img src="13/singleton.svg" style="width: 80%"

= slide 'Object#singleton_class' do
  p Собственият клас е достъпен чрез <code>#singleton_class</code>

  annotate:
    things = []

    def things.answer
      42
    end

    things.singleton_class
    # =>
    things.singleton_class.instance_methods(false)
    # =>
    [].singleton_class.instance_methods(false)
    # =>

= slide 'Symbol и Integer', '...и техните singleton класове' do
  p
    ' Целите числа и символите нямат singleton класове. Това е заради специалното
      им вътрешно представяне в Ruby.

  annotate:
    1_000.singleton_class #!
    :blah.singleton_class #!

= slide 'class << thing', 'алтернативен синтаксис' do
  p Можете да отворите собствения клас на обект с <code>class &lt;&lt;</code>

  annotate:
    things = [22, :f, 'Sofia']

    class << things
      def size
        -5
      end

      def asl
        "#{self[0]}/#{self[1]}/#{self[2]}"
      end
    end

    things.asl  # =>
    things.size # =>

= slide 'super и singleton класове' do
  p Оригиналният метод е достъпен чрез <code>super</code>.

= slide 'super и singleton класове (2)' do
  annotate:
    things = [22, :f, 'Sofia']

    class << things
      def each
        super
        yield :P
      end
    end

    aggregated = []
    things.each do |thing|
      aggregated << thing
    end

    aggregated # =>

= slide 'super и singleton класове', 'OMG момент' do
  p Някой има ли идея защо <code>super</code> работи?

  .action
    annotate:
      things = []

      def things.answer
        42
      end

      things.singleton_class # =>
      things.singleton_class.superclass # =>

    p Да, singleton класът е наследник на класа на обекта.

= slide 'superclass и singleton класове', 'визуализация' do
  img src="13/singleton-superclass.svg" style="width: 80%"

= slide 'Въпроси дотук?' do
  p Ще продължим с преглед отвътре на "класовите" методи.

= slide 'Класови методи' do
  p Вероятно помните, че класови методи могат да се дефинират така:

  annotate:
    class Something
      def Something.foo() 42 end
      def self.bar() 42 end

      class << self
        def qux() 42 end
      end
    end

= slide 'Класови методи', '...всъщност' do
  p Класовите методи се пазят в собствения клас на класа

  annotate:
    class Something
      def self.answer() 42 end
    end

    Something.singleton_class # =>
    Something.singleton_class.instance_methods(false) # =>

= slide 'Класови методи', 'визуализация' do
  img src="13/class-singleton.svg" style="width: 80%"

= slide 'Класови методи', 'instance_eval върху класове' do
  annotate:
    class Something; end

    Something.instance_eval do
      def say_something() 'something' end
    end

    Something.say_something # =>
    Something.new.say_something #!

  list:
    Горното е същото като `def Something.say_something() 'something' end`
    `self == Something`
    Текущият клас е singleton класът на `Something`
    Дефинициите в `instance_eval` дефинират методи върху singleton класа

= slide 'define_singleton_method', 'примерна имплементация' do
  example:
    class Module
      def define_singleton_method(*args, &block)
        singleton_class.instance_eval do
          define_method(*args, &block)
        end
      end
    end

= slide 'Класови методи', 'class_eval' do
  annotate:
    class Something; end

    Something.class_eval do
      def say_something() 'something' end
    end

    Something.say_something #!
    Something.new.say_something # =>

  list:
    Горното е същото като `class Something; def say_something() 'something' end end`
    `self == Something`
    Текущият клас е `Something`
    Дефинициите в `class_eval` дефинират методи върху самия клас

= slide 'class_eval vs define_singleton_method' do
  list:
    `define_singleton_method` използваме, когато сме вътре в класа
    `class_eval` използваме, когато `define_singleton_method` не би ни свършил удобна работа

= slide 'extend', '...върху клас' do
  p Помните ли <code>extend</code>?

  annotate:
    module Knowledge
      def answer() 42 end
    end

    class Something
      extend Knowledge
    end

    Something.answer # =>

= slide 'extend', '...върху не-клас' do
  annotate:
    module Knowledge
      def answer() 42 end
    end

    text = "fourty-two"
    text.extend Knowledge

    text.answer # =>

  p.action Сещате ли се как може да се имплементира?

= slide 'extend', '...с class <<' do
  annotate:
    module Knowledge
      def answer() 42 end
    end

    class Something; end

    class << Something
      include Knowledge
    end

    Something.answer # =>

= slide 'extend', '...чрез instance_eval и singleton клас' do
  annotate:
    module Knowledge
      def answer() 42 end
    end

    class Something; end

    Something.singleton_class.instance_eval { include Knowledge }

    Something.answer # =>

= slide 'extend', '...чрез include' do
  annotate:
    module Knowledge
      def answer() 42 end
    end

    class Something; end

    Something.singleton_class.include Knowledge

    Something.answer # =>

  p Изводи:
  list:
    - `include` и `extend` са просто методи, викащи се на определени обекти
    - `obj.extend(foo)` ≃ `obj.singleton_class.include(foo)`

= slide 'Въпроси дотук?' do
  p Ще продължим да дълбаем в класовите методи при наследяване.

= slide 'Класови методи и наследяване' do
  p Класовите методи на родителя са достъпни в класовите методи на наследника:

  annotate:
    class Something
      def self.answer() 42 end
    end

    class Other < Something
      def self.better_answer() answer * 2 end
    end

    Other.better_answer # =>

= slide 'Класови методи и наследяване', 'друг OMG момент' do
  p Собственият клас на наследника наследява собствения клас на родителя:

  annotate:
    class Something; end
    class Other < Something; end

    Something.singleton_class        # =>
    Other.singleton_class.superclass # =>

    Something.singleton_class == Other.singleton_class.superclass # =>

= slide 'Класови методи и наследяване', 'визуализация' do
  img src="13/class-singleton-superclass.svg" style="width: 80%"

= slide 'Класови методи и наследяване', 'takeaway' do
  blockquote
    ' Singleton класът на суперкласа е суперкласът на singleton класа.

= slide 'Класови методи и наследяване' do
  list:
    Това продължава още едно ниво нагоре – до `BasicObject` и неговия singleton клас
    Singleton класът на `BasicObject` наследява от `Class`
    Тук "цикълът" се затваря и нещата започват да изглеждат както при singleton класове на обикновени обекти
    Обърнете внимание на разликата в родителя на singleton класа при обикновени обекти и при обекти тип "клас"
    При класове (които също са обекти), йерархията е по-различна

= slide 'Класови методи и наследяване', 'ancestors' do
  annotate:
    class Foo
    end

    Foo.singleton_class.ancestors
    # =>

= slide 'Класови методи и наследяване', 'DSL-и' do
  example:
    class Cow
      def self.moo(say)
        puts "#{say} moo"
      end
    end

    class Foo < Cow
      moo 'Hello'
    end

= slide 'Ancestor chains' do
  list:
    Викайки метод на <em>произволен</em> обект `object`, Ruby го търси в `object.singleton_class.ancestors`
    Тоест, за всеки инстанционен метод, в това число и "класовите", се гледа ancestor chain-а на singleton класа на обекта
    А класовите методи са просто инстанционни методи и инстанцията е обектът от тип "клас"
    Толкова просто е

= slide 'Няколко примера за ancestor chains' do
  p Относно търсенето на (инстанционни) методи на обектите от тип <code>String</code>:

  example:
    ''.singleton_class.ancestors
    # => [#<Class:#<String:0x007f8788e51bd8>>,
    #     String, Comparable, Object, Kernel, BasicObject]

    ''.class.ancestors
    # => [String, Comparable, Object, Kernel, BasicObject]

    String.ancestors
    # => [String, Comparable, Object, Kernel, BasicObject]

= slide 'Ancestor chains', 'за "класови" методи' do
  p По отношение на "класовите" методи, викани върхy <code>String</code>:

  example:
    String.singleton_class.ancestors
    # => [#<Class:String>, #<Class:Object>, #<Class:BasicObject>,
    #     Class, Module, Object, Kernel, BasicObject]

    String.class.ancestors
    # => [Class, Module, Object, Kernel, BasicObject]

    Class.ancestors
    # => [Class, Module, Object, Kernel, BasicObject]

= slide 'Grand Unified Theory' do
  ol
    li.action Има само един вид обекти - били те обикновени или модули
    li.action Има само един вид модули - били те обикновени или клас
    li.action Има само един вид методи - живеят в модули, които често са класове
    li.action Всеки обект има "реален клас" - бил той обикновен клас или собствен клас
    li.action Всеки клас има точно един суперклас - с изключение на <code>BasicObject</code>
    li.action Суперкласът на singleton класа на обект е класът на обекта. Суперкласът на singleton класа на клас е singleton класът на родителя на класа.
    li.action При извикване на метод, Ruby взема "реалния клас" и търси в неговия ancestor chain

  p.action &#8718;
