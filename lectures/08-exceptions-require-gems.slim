= slide 'Днес' do
  list:
    Изключения
    require
    gems

= slide 'OpenFest' do
  list:
    [OpenFest](http://openfest.org/) този уикенд (7/8 ноември)
    [Програмата е много богата](http://www.openfest.org/2015/bg/programa/)
    Има и [light conferences/unconferences и уъркшопи](http://www.openfest.org/2015/bg/workshopsbg/)
    Лекциите са интересни, но хората (публика и лектори) са още по-интересни
    Входът е свободен, Зала "България"
    Може да идвате и да си тръгвате когато искате

= slide 'Планина' do
  list:
    По стара традиция правим разходка в планината
    Тази година ще посетим Лозенската планина
    За момента се целим в 15. ноември (неделя)
    Ако прогнозата за времето не е съгласна - 22. ноември
    Повече информация и конкретна дата - другата сряда
    Ще пуснем новина и тема във форума с още детайли като му дойде времето

= slide 'Четвърта задача' do
  list:
    Публикувахме я късно вчера
    Срокът е до другата сряда в 17:30
    За упражнение на класове, Enumerable и изчистване на повторения в код
    Не започвайте веднага да пишете код
    Първо помислете за структурата му

= slide 'Скорост на напредване' do
  list:
    Нормално е материалът да се движи по-напред от вашето разбиране
    Ако имате нужда от време, за да осмислите дадена концепция, това е нормално
    Не си мислете, че сте "назад" спрямо колегите си или спрямо "материала"
    Ако имате проблеми с минали задачи, питайте - това е напълно окей

= slide 'Въпрос 1' do
  p Какво ще се случи при изпълнение на следния код (и защо):

  example:
    class Proc
      def ===(testable)
        call testable
      end
    end

    case 42
      when String         then 'This is a string'
      when :odd?.to_proc  then 'This is an odd number'
      when :even?.to_proc then 'This is an even number'
      else                     'I have no f*cking idea what this is.'
    end

  .action.answer
    p <code>case</code> използва "оператора" <code>===</code>, за да оценява различните случаи.
    p Всеки <code>when</code> се оценява така: <code>condition === testable</code>.

= slide 'Въпрос 2' do
  p Какъв ще бъде резултатът от изпълнението на следния код:

  example:
    class Sequence
      def generate
        yield
        yield 'hello'
        yield [1, 2]
      end
    end

    Sequence.new.to_enum.count # => ?

  .action.answer
    p Грешка – недефиниран метод <code>each</code>.
    p <code>Object#to_enum</code> е еквивалентно на <code>Object#enum_for(:each)</code>.
    p Правилният код тук би бил <code>Sequence.new.enum_for(:generate).count</code>. Щеше да върне <code>3</code>.

= slide 'Въпрос 3' do
  p Какъв ще бъде резултатът от изпълнението на следния код:

  example:
    numbers = {one: 'eins', two: 'zwei'}
    numbers.each.with_index.to_a.flatten.size # => ?

  .action.answer
    p <code>6</code>.
    p След <code>to_a</code> ще имаме списък с два елемента: <code>[[[:one, "eins"], 0], [[:two, "zwei"], 1]]</code>.

= slide 'Въпрос 4' do
  p Какъв ще бъде резултатът от изпълнението на следния код:

  example:
    numbers = {one: 'eins', two: 'zwei'}.freeze
    numbers[:one].upcase!

  .action.answer
    p Няма да има грешка.
    p Хешът <code>numbers</code> реално не се променя. Мутира се само обектът, към който сочи ключа <code>:one</code>.
    p За да се предпазим от това, би могло да напишем <code>numbers.each { |_, number| number.freeze }</code>.

= slide 'Въпрос 5' do
  p Какъв ще бъде резултатът от изпълнението на следния код:

  example:
    x = 0
    0.upto(100).lazy.map { x += 1 }.map { x += 1 }.take(2)

    x # => ?

  .action.answer
    p <code>0</code>. Причината е, че lazy последователността все още не е оценена.

  .action.answer
    p Може да я оценим с <code>to_a</code> след <code>take()</code>. Тогава <code>x</code> щеше да е 4.

= slide 'Изключения' do
  list:
    Всички знаем какво са изключения.
    Нали?
    Метод за обработка на грешки.
    Позволява разделяне на обработката от останалия код.
    Все хубави неща.

= slide 'Изключенията в Ruby' do
  list:
    Накратко, двойка клас и низ.
    Съответно, тип на изключението и съобщение за грешка.
    Класовете за изключения са в йерархия.
    Два важни типа `Exception` и `StandardError`.
    `StandardError < Exception`.

= slide 'Непълна йерархия' do
  pre
    ' Object
      +-- Exception
         +-- NoMemoryError
         +-- ScriptError
         |   +-- SyntaxError
         |   +-- LoadError
         +-- SecurityError
         +-- StandardError
             +-- ArgumentError
             +-- IndexError
             |   +-- KeyError
             |   +-- StopIteration
             +-- NameError
             |   +-- NoMethodError
             +-- RuntimeError
             +-- TypeError

  p После ще видим пълната.

= slide 'Предизвикване на изключения' do
  annotate:
    # Предизвиква RuntimeError
    raise "'Prophet!' said I, 'Thing of evil!" #!

    # Като горното, но с различен текст
    raise RuntimeError, 'prophet still, if bird or devil!' #!

    # Друг начин да предизвикаме RuntimeError
    raise RuntimeError.new('Whether tempter sent, or whether...') #!

= slide 'Хващане на изключения' do
  annotate:
    begin
      puts '...tempest tossed thee here ashore'
      raise NameError, 'Desolate yet all undaunted'
    rescue => ex
      ex.message   #=>
      ex.class     #=>
    end

= slide 'Хващане на изключения', 'хващане на конкретен тип' do
  annotate:
    begin
      raise KeyError, 'on this desert land enchanted'
    rescue ArgumentError => ex
      puts 'on this home by horror haunted'
    rescue KeyError, TypeError => ex
      ex.message  # =>
      ex.class    # =>
    end

= slide 'Какво хваща rescue?' do
  p <code>rescue</code> хваща "само" наследници на <code>StandardError</code>, ако не сме указали друго:
  pre
    ' Object
      +-- Exception
         +-- NoMemoryError
         +-- ScriptError<strong>
         +-- StandardError
             +-- ArgumentError
             +-- NameError
             |   +-- NoMethodError
             +-- RuntimeError</strong>

= slide 'Въпрос към вас', 'Какво ще се случи тук?' do
  example:
    begin
      raise KeyError, 'tell me truly, I implore'
    rescue IndexError => ex
      puts 'IndexError'
    rescue KeyError => ex
      puts 'KeyError'
    end

= slide 'Йерархията отново' do
  pre
    ' Object
      +-- Exception
         +-- NoMemoryError
         +-- ScriptError
         |   +-- SyntaxError
         |   +-- LoadError
         +-- SecurityError
         +-- StandardError
             +-- ArgumentError
             +-- IndexError
             |   +-- KeyError
             |   +-- StopIteration
             +-- NameError
             |   +-- NoMethodError
             +-- RuntimeError
             +-- TypeError

= slide 'Хващане на изключения', 'приоритет на rescue клаузите' do
  p Припомняне <code>KeyError &lt; IndexError</code>

  annotate:
    $eh = 'foo'

    begin
      raise KeyError, 'Is there - is there balm in Gilead?'
    rescue IndexError => ex
      $eh = 'index'
    rescue KeyError => ex
      $eh = 'key'
    end

    $eh    # =>

  p.action Изпълнява се първия <code>rescue</code>, за който изключението е <code>kind_of?</code> типа.

= slide 'Запомнете' do
  p Динамичните езици обикновено ползват прости правила

  list:
    "Първото отговарящо" е по-просто от "по-подходящото".
    Или от "всички отговарящи".
    Аналогичен случай с модулите.
    Два дизайн принципа: KISS и POLA.
    Keep it simple, stupid!
    Principle of least astonishment.
    Важат с пълна сила за кода, който пишете.

= slide 'Хващане на изключения', 'ensure клауза' do
  p Кодът в <code>ensure</code> клаузата се изпълнява винаги.

  example:
    begin
      raise 'tell me - tell me, I implore!' if rand(2).zero?
    ensure
      puts '????? ??? ?????, "?????????"'
    end

  ul
    li <code>rand(2).zero?</code> връща <code>true</code> или <code>false</code>, 50 на 50.
    li Подходяща е за затваряне на ресурс, като отворен файл.
    li Някой сеща ли се какво има на мястото на въпросителните?

= slide 'Хващане на изключения', 'else клауза' do
  p <code>else</code> клаузата се изпълнява когато няма възникнало изключение.

  example:
    begin
      launch_nukes
    rescue
      puts 'Uh-oh! Something went wrong :('
    else
      puts 'War... War never changes'
    end

  list:
    Обърнете внимание, че `launch_nukes` няма удивителна.
    Дори да е опасен, няма &quot;по-безопасна&quot; версия.
    Не заслужава допълнителна пунктуация.

= slide 'The beginning and the end' do
  example:
    begin
      get_a_life
    rescue NoFriendsError => ex
      puts 'Goodbye cruel world'
    rescue InsufficientVespeneGasError, NotEnoughMineralsError
      puts 'show me the money'
    rescue
      puts ';('
    else
      puts 'Woohoo!'
    ensure
      puts 'rm -rf ~/.history'
    end

= slide 'rescue в метод' do
  p В случай, че ползвате <code>rescue</code> в метод така:

  example:
    def execute
      begin
        potentially_dangerous
      rescue SomeException => e
        # Handle the error
      ensure
        # Ensure something always happens
      end
    end

= slide 'rescue в метод', 'Предпочитания вариант' do
  p По-добре е да го запишете без <code>begin</code>/<code>end</code>, което е еквивалентно на предното:

  example:
    def execute
      potentially_dangerous
    rescue SomeException => e
      # Handle the error
    ensure
      # Ensure something always happens
    end

= slide 'Предизвикване на изключение', 'по време на обработка на друго' do
  p Ако възникне изключение при обработка друго, старото се игнорира и се "вдига" новото.

  example:
    begin
      raise KeyError
    rescue
      raise TypeError
      puts "I'm a line of code, that's never executed ;("
    end

= slide 'raise в rescue' do
  p
    ' <code>raise</code> в <code>rescue</code> клауза "вдига" същото
      изключение, което се обработва.

  example:
    begin
      raise KeyError, 'But high she shoots through air and light'
    rescue
      puts 'Whoops'
      raise
    end

= slide 'begin/end', '...е израз, като всичко друго в ruby' do
  annotate:
    result = begin
      raise KeyError if rand(3).zero?
      raise NameError if rand(3).zero?
    rescue KeyError
      'nyckel'
    rescue NameError
      'namn'
    else
      'ingenting'
    end

    result    # =>

= slide 'rescue като модификатор' do
  ul
    li <code>rescue</code> може да се ползва като модификатор.
    li Ако възникне изключение, rescue връща стойността отдясно.
    li Внимавайте. Така може да хващате само <code>StandardError</code>.
    li Или да хванете неща, които не сте очаквали.

  annotate:
    [].fetch(1) rescue 'baba' # =>

= slide 'Exception#exception' do
  p
    ' <code>raise type, message</code> всъщност извиква <code>type.exception(message)</code>
      за да конструира изключение.

  annotate:
    class Thing
      def exception(message)
        NameError.new(message)
      end
    end

    thing = Thing.new
    raise thing, 'whoops' #!

= slide 'Как да ползваме изключения' do
  p Може да разделим изключенията на два вида.

  ul
    li Такива, които обикновено ще хващаме с <code>rescue</code>.
    li Такива, които няма да хващаме.

  p За първите обикновено създаваме клас. За вторите обикновено ползваме <code>raise</code>.

= slide 'Кога ползваме изключения' do
  list:
    Някой ще хваща ли това изключение въобще?
    Ако не, не правете нов клас.
    Клиентът може ли да предвиди дали ще възникне изключение?
    Ако да, не го принуждавайте да го ползва.
    Не принуждавайте клиента да знае за изключенията ви, освен когато нямате избор.
    Например писане по мрежата - няма как да знаете предварително.

= slide 'Разсъждения' do
  list:
    Много рядко някой иска да хване `KeyError` или `IndexError`. Защо?
    Ако пишете библиотека, помислете за базов клас на нейните изключения.
    Look Before You Leap и Better Ask Forgiveness Than Permission.
    Не ползвайте изключенията за control flow. В Ruby има друга конструкция.

= slide 'Въпроси за изключенията?' do
  p Имате ли въпроси по механизма за изключения в Ruby?

= slide 'Импортиране на файлове' do
  p В Ruby, код от други файлове се импортира с <code>require</code>.

  .action
    p Например:

    example:
      require 'bigdecimal'
      require 'bigdecimal/util'

= slide 'Какво търси require?' do
  list:
    `require 'foo'` търси файл `foo.rb` в "пътя за зареждане"
    Още известен като load path
    Той съдържа няколко "системни" пътища, плюс пътища от gem-ове, които сте си инсталирали
    Очевидно, `require 'foo/bar'` търси директория `foo` с файл `bar.rb`
    Разширението `.rb` отзад не е задължително да присъства
    `require './foo'` търси `foo.rb` в текущата директория
    Разбира се, абсолютни пътища също работят: `require '/home/skanev/foo.rb'`

= slide 'Текуща директория на процес', 'лирическо отклонение' do
  p Всеки процес си има "текуща директория". По подразбиране наследява това от процеса, който го стартира и може да се променя.
  list:
    Не винаги е директорията, в която се намира първоначално стартираният файл.
    Следователно `require './foo'` не винаги ще зареди това, което очаквате.

= slide 'Зареждане на файлове от текущата директория' do
  list:
    Обикновено във вашия load path текущата директория не присъства
    Някои хора се осмеляват да си я добавят, променяйки load path (не е добра идея)
    Ползвайте релативен път, т.е. `require './foo'`

= slide 'Зареждане на файлове от текущата директория', 'require_relative' do
  list:
    Алтернатива на горното е `require_relative`
    `require_relative 'foo'` зарежда 'foo' спрямо <strong>директорията на изпълняващия се файл</strong>
    `require './foo'` зарежда спрямо <strong>текущата директория на изпълняващия процес</strong>

= slide 'Load path', 'където Ruby търси файлове за require' do
  list:
    Достъпен е като `$LOAD_PATH`
    Още `$:`
    Може да го променяте. Стандартно с `$:.unshift(path)`
    Не е много добра практика да го правите

= slide 'Как работи require?' do
  list:
    Изпълнява файла
    Константите, класове, глобални променливи и прочее са достъпни отвън
    Няма абстракция. Все едно сте inline-нали файла на мястото на `require`-а. Почти
    Файлът е изпълнен с друг binding. Демек, локалните му променливи са изолирани. Но само те
    Не, че има значение, но `main` обектът е същият
    Файлът се изпълнява само веднъж. Повторни `require`-и не правят нищо
    Последното може да се излъже по няколко начина
    `require` може да зарежда `.so` и `.dll` файлове

= slide 'Библиотеките в Ruby' do
  list:
    Знаете, че се наричат gem-ове
    Де-факто стандартна репозитория за библиотеки е [RubyGems](http://rubygems.org/)
    Един gem е просто zip-ната папка с файлове
    Инсталация на gem представлява сваляне на този zip и разархивирането му някъде
    Това "някъде" е папка на вашия компютър, намираща се в `$LOAD_PATH`

= slide 'Типичната структура на един gem', 'skeptic опростен' do
  pre
    ' .
      ├── README.rdoc
      ├── Rakefile
      ├── bin
      │   └── skeptic
      ├── features
      ├── lib
      │   ├── skeptic
      │   │   ├── rules.rb
      │   │   └── scope.rb
      │   └── skeptic.rb
      ├── skeptic.gemspec
      └── spec

= slide 'Особеностите' do
  list:
    `lib/` обикновено съдържа `foo.rb` и `lib/foo/`
    `foo.rb` обикновено е единственото нещо в `lib/`
    Всичко останало е в `lib/foo`
    `lib/` се добавя в load path
    Така вече може да правите `require 'foo'` или `require 'foo/something'`
    По този начин не замърсявате `require` областта
    RubyGems прави това "автомагично"

= slide 'Останалите неща' do
  list:
    Разгледайте [github.com/skanev/skeptic](skanev/skeptic) за повече подробности
    После разгледайте някой друг gem
    После си поиграйте малко с `require` и `$LOAD_PATH` и вижте какво се случва
    Вижте [ръководствата в RubyGems](http://guides.rubygems.org/)

= slide 'Kernel#load' do
  list:
    `load` е много сходен с `require`, но има няколко разлики
    Иска разширение на файл - `load 'foo.rb'`
    Повторни `load`-ове изпълняват файла
    `load` не може да зарежда `.so`/`.dll` библиотеки
    `load` има опционален параметър, с който може да обвие файла в анонимен модул
    Последното дава известна изолация
