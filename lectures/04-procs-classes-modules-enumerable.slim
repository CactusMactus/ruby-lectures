= slide 'Днес' do
  list:
    Анонимни функции и блокове (преговор)
    Proc-обекти
    Класове и модули
    `Enumerable`

= slide 'С-бира-не', 'сряда' do
  list:
    Вместо лекция, тази сряда (21-ти) няма да сме във ФМИ, а на "по бира"
    Има събитие във Facebook
    Ако ще идвате, моля известете ни по някакъв начин максимално рано (във Facebook или на имейла ни)
    Ще бъде в [MAZE](https://www.facebook.com/mazesofia), след 19:30
    Резервацията е на Димитър Димитров

= slide 'Втора задача', 'няколко думи' do
  list:
    Оставили сме коментари на всички, предали по-рано
    Прочетете ги
    Разгледайте нашето решение и тези на другарчетата си

= slide 'Втора задача', '...и "плитките" копия' do
  p <code>dup</code> прави "плитко" копие
  p immutable методите също (<code>+</code>, <code>drop</code>, ...)

  annotate:
    snake = [[2, 3], [2, 4], [2, 5]] # =>
    grown_snake = snake + [[2, 6]]   # =>

    snake.equal?(snake)              # =>
    snake.equal?(grown_snake)        # =>

    snake[0]                         # =>
    grown_snake[0]                   # =>
    snake[0].equal?(grown_snake[0])  # =>

= slide 'Трета задача', '"тия не се спряха, бе..."' do
  list:
    Пускаме я днес
    Срокът ще е до идния понеделник, 17:30 ч.
    Малко по-сложна от предните задачи

= slide 'Въпрос 1' do
  p Какво прави <code>def</code>, ако не се намираме в <code>class</code>?

  .answer
    list:
      `def` винаги дефинира метод в някакъв клас
      Ако `def` не е в дефиниция на клас, отива като private метод на Object

= slide 'Въпрос 2' do
  p Какво е <code>*b</code> в този контекст? Колко аргумента можем да подаваме на тази функция най-много? А най-малко?

  example:
    def something(a, *b, c)
    end

  .answer
    list:
      Параметър, който при извикване на функцията ще съдържа списък от аргументите, които може да са променлив брой
      Поне 2 аргумента

= slide 'Въпрос 3' do
  p Какво са <code>drink</code>, <code>size</code> и <code>syrup</code> в този контекст, има ли някаква разлика между тях и ако да, каква?

  example:
    def order(drink:, size: 'grande', syrup: nil)
    end

  .answer
    list:
      `drink` е задължителен аргумент
      `size` и `syrup` имат стойности по подразбиране
      Всички са keyword arguments

= slide 'Въпрос 4' do
  p Какви начини знаете за извикване на следната анонимна функция?
  p `a**b` или `a ** b`?

  example:
    pow = lambda { |a, b| a**b }

  .answer
    list:
      `pow.call 2, 3`
      `pow[2, 3]`
      `pow.(2, 3)`
      `a**b`

= slide 'Въпрос 5' do
  p Каква е конвенцията за употреба на <code>!</code> в края на името на метод?

  .answer
    list:
      Символът `!` се поставя в края на метод, ако съществуват две версии на метода, с еднакво име и с разлика в поведението. Обикновено удивителната получава "по-опасният" метод, каквото и да означава това.
      Метод с `!` в края <strong>не е</strong> задължително метод, който мутира обект, както и има методи, които мутират обекти, но не са с удивителна в края (например, `Array#pop`).

= slide 'Анонимни функции (преговор)' do
  example:
    # Синтаксис
    say_hi = lambda { puts 'Hi there!' }
    double = lambda { |x| x * 2 }
    pow = lambda { |a, b| a**b }

    # Симпатичен синтаксис (1.9+)
    say_hi = -> { puts 'Hi there' }
    double = ->(x) { x * 2 }
    pow = ->(a, b) { a**b }

    # Извикване
    pow.call 2, 3
    pow[2, 3]
    pow.(2, 3)

= slide 'Блокове (преговор)' do
  annotate:
    def calculate
      result = yield(2)
      "The result for 2 is #{result}"
    end

    calculate { |x| x**2 } # =>

  list:
    Всеки метод може да приеме допълнителен аргумент, който е "анонимна функция"
    Може да го извикате от метода с <code>yield</code>
    Блокът може да приема аргументи
    <code>yield</code> се оценява до стойността на блока

= slide 'Блокове (преговор)', '& при извикване на метод' do
  p Ако имате ламбда, която искате да подадете като блок, може да ползвате <code>&</code>:

  example:
    is_odd = lambda { |n| n.odd? }

    filter([1, 2, 3, 4, 5], &is_odd)
    filter([1, 2, 3, 4, 5]) { |n| n.odd? }

  p Горните са (почти) еквиваленти. Има малка разлика в някои други случаи.

= slide 'Блокове (преговор)', 'в сигнатурата' do
  p Ако искате да вземете блока като обект, има начин:

  example:
    def invoke_with(*args, &block)
      block.call(*args)
    end

    invoke_with(1, 2) { |a, b| puts a + b }

= slide 'Блокове (допълнение)', '...и една особеност' do
  p
    ' Ако първият аргумент на функция е хеш, трябва да изтървете скобите на хеша,
      ако изтървете скобите на метода.

  example:
    # Валиден код
    order drink: 'latte', size: 'grande'
    order({drink: 'latte', size: 'grande'})

    # Невалиден код
    order {drink: 'latte', size: 'grande'}

  p Във втория случай, Ruby си мисли, че му подавате блок.

= slide 'Keyword arguments (допълнение)' do
  p Работят и в ламбди, и в блокове

  example:
    ->(foo:, **opts) { p [opts] }.call foo: 'bar', larodi: 'baz'

= slide 'Въпроси до тук?' do
  p Сега е моментът да ги зададете :-)

= slide 'Proc.new', 'където става странно' do
  p В Ruby има два вида анонимни функции. Другият е Proc.

  example:
    double = Proc.new { |x| x * 2 }

    double.call(2)
    double[2]
    double.(2)

  p Дотук е същото като при <code>lambda</code>, но има някои разлики при извикване.

= slide 'lambda е специален вид Proc', 'където става по-странно' do
  p Анонимните функции са обекти тип `Proc`, но с вдигнат специален флаг

  annotate:
    lambda { |n| n**2 }   # =>
    Proc.new { |n| n**2 } # =>

= slide 'Разлики между Proc.new и lambda' do
  table
    thead
      tr
        th
          code f =
        th
          code Proc.new { |x, y| p x, y }
        th
          code lambda { |x, y| p x, y }
    tbody
      tr
        td
          code f.call(1)
        td 1 nil
        td ArgumentError
      tr
        td
          code f.call(1, 2)
        td 1 2
        td 1 2
      tr
        td
          code f.call(1, 2, 3)
        td 1 2
        td ArgumentError
      tr
        td
          code f.call([1, 2])
        td 1 2
        td ArgumentError
      tr
        td
          code f.call(*[1, 2])
        td 1 2
        td 1 2

  list:
    `yield` ползва семантиката на `Proc.new`
    Извикването на метод ползва семантиката на `lambda`

= slide 'Разлики между Proc.new и lambda', 'return' do
  ul
    li <code>return</code> в <code>lambda</code> излиза само от тялото на <code>lambda</code>-та
    li <code>return</code> в <code>Proc</code> излиза от тялото на метода, в който е изпълнен <code>Proc</code>-ът

  annotate:
    def return_in_lambda
      -> { return 42 }.call
      'Hello world'
    end

    def return_in_proc
      Proc.new { return 42 }.call
      'Hello world'
    end

    return_in_lambda # =>
    return_in_proc   # =>

= slide 'Блокове, Proc-ове и ламбди', 'обобщение' do
  list:
    Ламбдите (`lambda`) и `Proc`-овете са анонимни функции
    Ламбдите са почти идентични на обикновени методи
    Ламбдите са обекти от тип `Proc`, с вдигнат специален флаг
    Блоковете са синтактична конструкция
    Синтаксисът около блокове включва скобите (`{`/`}`, `do`/`end`) и `yield`
    Блок може да бъде достъпен като обект (`Proc`) и да се извика като анонимна функция
    `lambda`/`Proc` може да се ползва като блок

= slide 'Въпроси до тук?' do
  p Сега е моментът да ги зададете :-)

= slide 'Блокове', 'в Ruby като цяло' do
  list:
    Ползват се изключително често (разбирайте, всичко през ред е блок)
    Премахват нуждата от много синтаксис
    Има още мистика, за която ще си говорим следващата седмица
    Ето няколко примера

= slide 'Функционални закачки' do
  p Стандартните функционални неща:

  annotate:
    numbers = [-9, -4, -1, 0, 1, 4, 9]

    positive = numbers.select { |n| n >= 0 }
    # =>
    even = numbers.reject { |n| n.odd? }
    # =>
    squares = numbers.map { |n| n**2 }
    # =>
    roots = numbers.select { |n| n > 0 }.map { |n| n**0.5 }
    # =>

= slide 'Функционални закачки', 'синоними' do
  p
    ' <code>#select</code> и <code>#map</code> имат синоними
      <code>#find_all</code> и <code>#collect</code>:

  annotate:
    numbers = [-9, -4, -1, 0, 1, 4, 9]

    squares = numbers.collect { |n| n**2 }
    # =>
    positive = numbers.find_all { |n| n >= 0 }
    # =>

  p В Ruby подобни синоними се срещат често.

= slide '#reduce', 'ако разбирате това, значи сте ОК' do
  p <code>#reduce</code> свежда списък до единична стойност с някаква операция:

  annotate:
    numbers = [1, 2, 3, 4, 5]

    numbers.reduce(0) { |a, b| a + b }
    # =>
    numbers.reduce(1) { |a, b| a * b }
    # =>

    numbers.reduce { |a, b| a + b }
    # =>
    numbers.reduce { |a, b| "#{a}, #{b}" }
    # =>

  .action
    p <code>#reduce</code> и <code>#inject</code> са синоними. Ползвайте първото.

= slide '#reduce', 'примерна имплементация' do
  example:
    def reduce(array, initial = nil)
      remaining = array.dup
      buffer    = initial || remaining.shift

      until remaining.empty?
        buffer = yield buffer, remaining.shift
      end

      buffer
    end

    reduce([1, 2, 3, 4]) { |a, b| a + b }
    reduce([1, 2, 3, 4], 0) { |a, b| a + b }

= slide '#reduce', 'още по-примерна имплементация' do
  p За забавлението. Неяснотиите &mdash; след малко.

  example:
    class Array
      def reduce(initial = nil)
        remaining = dup
        buffer    = initial || remaining.shift

        until remaining.empty?
          buffer = yield buffer, remaining.shift
        end

        buffer
      end
    end

= slide 'Въпроси до тук?' do
  p Сега е моментът да ги зададете :-)

= slide 'Ruby и ООП' do
  list:
    Всичко е обект
    Duck typing
    Няма функции, има само методи
    Няма множествено наследяване, но има mixin-и

= slide 'Класове', 'прост пример' do
  p
    | Дефинират се с <code>class</code>. Методите, дефинирани в тялото на класа,
      стават методи на инстанциите му. Инстанцират се с <code>ИмеНаКласа.new</code>.

  annotate:
    class Bacon
      def chunky?
        'yes, of course!'
      end
    end

    bacon = Bacon.new
    bacon.chunky?      # =>

= slide 'Класове', 'конструктури' do
  annotate:
    class Vector
      def initialize(x, y)
        @x = x
        @y = y
      end
    end

  list:
    `initialize` играе ролята на конструктор в Ruby
    Може и да не се дефинира
    Не връща стойност

= slide 'Класове', 'полета' do
  p Полетата (още: instance variables) имат представка <code>@</code>.

  annotate:
    class Vector
      def initialize(x, y)
        @x = x
        @y = y
      end

      def length
        (@x * @x + @y * @y)**0.5
      end
    end

    vector = Vector.new 2.0, 3.0
    vector.length()     # =>
    vector.length       # =>

= slide 'Класове', 'полета (2)' do
  p По подразбиране имат стойност <code>nil</code>.

  example:
    class Person
      def soul
        @nothingness
      end
    end

    person = Person.new
    person.soul # nil

= slide 'Въпроси до тук?' do
  p Сега е моментът да ги зададете :-)

= slide 'Класове', 'викане на методи' do
  p
    ' В метод може да извикате друг със <code>self.име_на_метод</code>
      или просто <code>име_на_метод</code>:

  example:
    class Person
      def initialize(name) @name = name                end
      def say_hi()         puts "My name is #{@name}!" end
      def sound_smart()    puts "1101000 1101001"      end

      def talk
        self.say_hi
        sound_smart
      end
    end

    mel = Person.new 'Mel'
    mel.talk

  p Такова подравняване на методи е гадно, но пък се събира в слайд.

= slide 'Класове', 'self' do
  p
    ' В методите на класа, <code>self</code> е референция към обекта,
      на който е извикан методът. Като <code>this</code> в Java или C++.

  annotate:
    class Person
      def me
        self
      end
    end

    person = Person.new
    person           # =>
    person.me        # =>
    person.me.me     # =>

= slide 'Атрибути' do
  p Полетата не са публично достъпни. Може да ги достигнете само чрез метод.

  annotate:
    class Person
      def initialize(age)
        @age = age
      end

      def age
        @age
      end

      def set_age(age)
        @age = age
      end
    end

    person = Person.new(33)
    person.age          # =>
    person.set_age 20
    person.age          # =>

= slide 'Атрибути', 'setter-и' do
  p Разбира се, <code>set_age</code> е гадно име на метод. Може и по-добре:

  annotate:
    class Person
      def age
        @age
      end

      def age=(value)
        @age = value
      end
    end

    person = Person.new
    person.age = 33  # Същото като person.age=(33)

    person.age       # =>

= slide 'Атрибути', 'attr_accessor' do
  p Последното е досадно за писане. Затова:

  annotate:
    class Person
      attr_accessor :age
    end

    person = Person.new
    person.age = 33

    person.age # =>

= slide 'Атрибути', 'какво е `attr_accessor`?' do
  p
    ' <code>attr_accessor</code> е метод, който генерира два метода &mdash; <code>#foo</code>
      и <code>#foo=</code>. Достъпен е в дефинициите на класове. Неформален термин за такива
      методи е "class macro".
  p Има ги в изобилие.

= slide 'Атрибути', 'другите макроси' do
  p Ако ви трябва само getter или setter, може така:

  example:
    class Person
      attr_reader :name
      attr_writer :grade
      attr_accessor :age, :height

      attr :address # като attr_reader
    end

= slide 'Въпроси до тук?' do
  p Сега е моментът да ги зададете :-)

= slide 'Атрибути', "Meyer's Uniform Access Principle" do
  p Обърнете внимание, че следните два реда правят едно и също:

  example:
    person.age()
    person.age

  p
    ' Няма разлика между достъпване на атрибут и извикване на метод, който го изчислява. Това се нарича
      <a href="http://en.wikipedia.org/wiki/Uniform_access_principle">Uniform Access Principle</a>
      и като цяло е хубаво нещо.

= slide 'Конвенции', 'напомняне' do
  p В Ruby важат следните конвенции.

  list:
    Имената на класове (и модули) са всъщност константи
    Такива константи се изписват с `UpperCamelCase`
    За обикновени константи (разни стойности) се ползва `SCREAMING_SNAKE_CASE`
    Методите и променливите се изписват с `plain_snake_case` (в т.ч. и инстанционните променливи)

= slide '"Отваряне" на класове' do
  p Във всеки момент може да "отворите" клас и да му добавите методи.

  annotate:
    class Person
      def name
        'River'
      end
    end

    class Person
      def say_hi
        "Hi, I am #{name}."
      end
    end

    Person.new.say_hi # =>
    Person.new.name   # =>

= slide 'Повторно дефиниране на метод' do
  p Ако дефинирате един метод два пъти, втората дефиниция измества първата.

  example:
    class Someone
      def name
        'Tom Baker'
      end

      def name
        'Colin Baker'
      end
    end

    Someone.new.name # => 'Colin Baker'

= slide 'Тялото на класа', 'където става странно' do
  p Тялото на класа е напълно изпълним код:

  annotate:
    class Something
      a = 1
      b = 2
      a + b #=>
    end

= slide 'Тялото на класа (2)' do
  p Понякога дори е полезно:

  annotate:
    class Object
      if RUBY_VERSION <= '1.8.6'
        def tap
          yield self
          self
        end
      end
    end

= slide 'Въпроси до тук?' do
  p Сега е моментът да ги зададете :-)

= slide 'Object#methods' do
  p
    ' Ако извикате <code>#methods</code> на нещо, ще получите масив от символи
      с имената на методите му.

  p Помните ли <code>Array#-</code>?

  annotate:
    class Person
      def foo() end
      def bar() end
    end

    Person.new.methods - Object.new.methods # =>

= slide 'Предефиниране на оператори' do
  p Много интуитивно.

  annotate:
    class Vector
      attr_accessor :x, :y

      def initialize(x, y)
        @x, @y = x, y
      end

      def +(other)
        Vector.new(x + other.x, y + other.y)
      end

      def inspect
        "Vector.new(#@x, #@y)"
      end
    end

    Vector.new(1, 5) + Vector.new(3, 10) # =>

= slide 'Предефинируеми оператори' do
  p Ето и всички оператори, които можете да предефинирате:

  list:
    Аритметични оператори `+ - * / % **`
    Двоични оператори `^ | &`
    Оператори за сравнение `<= < > >=`
    Оператори за равенство и разпознаване по шаблон `<=> == === != =~ !~`
    И още `[] []= >> <<`, както и унарните `+ -`

= slide 'Забележки относно предефиниране на оператори' do
  list:
    Тези оператори не са комутативни!
    За всяка операция от вида `a + b` всъщност се извиква `a.+(b)` (методът + от класа на `a`)
    Операторите от вида `+= >>= &&=` не могат да се предефинират, но действат според очакваното.
    `a += b` е просто синтаксис за `a = a + b`
    Можете да предефинирате унарните `+ -` съответно чрез методите `+@ -@`

= slide 'Въпроси до тук?' do
  p Сега е моментът да ги зададете :-)

= slide 'private' do
  annotate:
    class Person
      def say_hi
        "Hello! I am #{name}"
      end

      private

      def name
        'the Doctor'
      end
    end

    person = Person.new
    person.say_hi     # =>
    person.name       #!

= slide 'private (2)' do
  p
    ' Ако един метод е <code>private</code>, не може да го викате с явен получател.
      Дори със <code>self.</code>

  annotate:
    class Person
      def say_hi
        "Hello! I am #{self.name}"
      end

      private

      def name
        'the Doctor'
      end
    end

    person = Person.new
    person.say_hi     #!

= slide 'protected' do
  list:
    В Ruby има и `protected`
    Не е точно това, което очаквате
    Ползва се много рядко
    Основно ползвате `private`
    Ще си говорим за `protected` и `private` отново в следващи лекции

= slide 'Въпроси до тук?' do
  p Сега е моментът да ги зададете :-)

= slide 'Модули' do
  p Модулите в Ruby имат няколко предназначения:

  ul
    li Именовани пространства
    li Съдържане на "не-instance" методи
    li Mixins

  p Днес ще разгледаме последното.

= slide 'Модули', 'като колекция от методи' do
  p Модулите в Ruby просто съдържат методи. Дефинират се подобно на класове:

  example:
    module UselessStuff
      def almost_pi
        3.1415
      end

      def almost_e
        2.71
      end
    end

= slide 'Модули', 'миксиране' do
  p
    ' Модулите могат да се "миксират" с клас. Тогава той получава всички методи
      на модула като инстанционни методи.

  annotate:
    module UselessStuff
      def almost_pi
        3.1415
      end
    end

    class Something
      include UselessStuff
    end

    Something.new.almost_pi # =>

= slide 'Модули', 'self' do
  p
    ' В метод на модула, <code>self</code> е инстанцията от класа, в който модулът е бил миксиран и на която е извикан даденият метод.

  annotate:
    module Introducable
      def introduction
        "Hello, I am #{name}"
      end
    end

    class Person
      include Introducable
      def name() 'The Doctor' end
    end

    doctor = Person.new
    doctor.introduction # =>

= slide 'Модули', 'приоритет на методите' do
  p Методите на класа имат приоритет пред методите на модула.

  annotate:
    module Includeable
      def name() 'Module' end
    end

    class Something
      def name() 'Class' end
      include Includeable
    end

    Something.new.name # =>

= slide 'Модули', 'приоритет на методите (2)' do
  p Ако два модула дефинират един и същи метод, ползва се методът от последно миксирания модул:

  annotate:
    module Chunky
      def name() 'chunky' end
    end

    module Bacon
      def name() 'bacon' end
    end

    class Something
      include Chunky
      include Bacon
    end

    Something.new.name # =>

= slide 'Модули', 'приоритет на методите (3)' do
  p Просто за информация: методите на mixin-ите имат приоритет пред тези на родителя.
  p
    ' Всичко това е свързано с нещо, наречено <em>ancestor chain</em>, за което
      ще си говорим следващия път.

= slide 'Въпроси до тук?' do
  p Сега е моментът да ги зададете :-)

= slide 'Enumerable' do
  list:
    Най-важният модул в Ruby
    Дава много полезни методи за обработка на масиви
    Ползва се постоянно
    [Документация на Enumerable](http://ruby-doc.org/core-2.1.0/Enumerable.html)

= slide '#collect, #find_all и #inject' do
  p Помните ли тези методи и техните синоними?

  annotate:
    [1, 2, 3, 4, 5].select { |n| n.odd? }           # =>
    %w(foo plugh barney).map { |word| word.length } # =>
    [1, 2, 3, 4, 5].reduce { |a, b| a * b }         # =>

  .action
    p Те са имплементирани в <code>Enumerable</code>, а не в <code>Array</code>.
    p Всяка колекция в Ruby ги има.

= slide 'Други методи на Enumerable' do
  pre
    ' all?        any?          chunk       collect          collect_concat
      count       cycle         detect      drop             drop_while
      each_cons   each_entry    each_slice  each_with_index  each_with_object
      entries     find          find_all    find_index       first
      flat_map    grep          group_by    include?         inject
      lazy        map           max         max_by           member?
      min         min_by        minmax      minmax_by        none?
      one?        partition     reduce      reject           reverse_each
      select      slice_before  sort        sort_by          take
      take_while  to_a          zip

  p По-нататък ще видите как използваме Enumerable, за да генерираме тази таблица.

= slide 'Hash ← Enumerable' do
  p Хешовете също са <code>Enumerable</code>:

  annotate:
    hash = {2 => 3, 4 => 5}

    hash.to_a                                 # =>
    hash.map { |p| p[0] + p[1] }              # =>
    hash.map { |k, v| k + v }                 # =>
    hash.reduce(0) { |s, p| s + p[0] * p[1] } # =>

= slide 'Hash ← Enumerable', 'бележка под линия' do
  p Някои от <code>Enumerable</code> методите в <code>Hash</code> са предефинирани.

  annotate:

    hash = {2 => 3, 4 => 5, 6 => 7, 8 => 9}

    hash.select { |k, v| v > 6 }      # =>
    hash.to_a.select { |k, v| v > 6 } # =>

  p <code>Enumerable#select</code> връща списък, но <code>Hash#select</code> връща хеш.

= slide 'Други неща за обхождане' do
  list:
    Разбира се, `Hash`, `Array`
    Класът `Range` от числа, дати, символи и прочее
    Класът за множество `Set` и други...

= slide 'include Enumerable', 'или как да го ползваме за наши класове' do
  list:
    Разбира се, започвате с `include Enumerable`
    Като минимум, трябва да дефинирате `#each`
    Той ви дава всичко останало

= slide 'include Enumerable', 'пример' do
  annotate:
    class FibonacciNumbers
      include Enumerable

      def initialize(limit)
        @limit = limit
      end

      def each
        current, previous = 1, 0

        while current < @limit
          yield current
          current, previous = current + previous, current
        end
      end
    end

    FibonacciNumbers.new(100).to_a # =>

= slide 'include Enumerable', 'пример' do
  annotate:
    class StepRange
      include Enumerable

      def initialize(first, last, step)
        @first, @last, @step = first, last, step
      end

      def each
        @first.step(@last, @step) { |n| yield n }
      end
    end

    StepRange.new(1, 10, 2).select { |n| n > 5 } # =>

= slide 'Въпроси до тук?' do
  p Сега е моментът да ги зададете :-)

= slide 'Масив от yield-ваща функция? (1)' do
  example:
    def each_digit
      yield 0; yield 1; yield 2; yield 3; yield 4
      yield 5; yield 6; yield 7; yield 8; yield 9
    end

  p Как да вземем yield-натите стойности в масив?

= slide 'Масив от yield-ваща функция? (2)' do
  example:
    result = []
    each_digit do |n|
      result << n
    end

  p Така става, ама е... какъв беше техническият термин?

  p.action "грозно"

= slide 'Масив от yield-ваща функция? (3)' do
  p Ето как може да стане:

  example:
    result = enum_for(:each_digit).to_a

  p Малко е шантаво, но пък много удобно.

= slide 'Масив от yield-ваща функция? (3)' do
  p Резултатът от <code>enum_for</code> имплементира <code>Enumerable</code>:

  example:
    evens = enum_for(:each_digit).
              select { |digit| digit.event? }

= slide '#lazy' do
  p Има една хватка, особено удобна за безкрайни функции:

  example:
    def each_number
      n = 0
      loop do
        n += 1
        yield n
      end
    end

    enum_for(:each_number).
      lazy.
      select { |x| x.odd? }.
      take(10)
